<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile System</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
      /* Global Styles */
:root {
    --primary-color: #4a6bff;
    --primary-dark: #3a56d4;
    --secondary-color: #f5f7ff;
    --text-color: #333;
    --light-text: #666;
    --light-gray: #e0e0e0;
    --medium-gray: #aaa;
    --danger-color: #ff4a4a;
    --success-color: #4aff9b;
    --border-radius: 6px;
    --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    --transition: all 0.3s ease;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: #f8f9fa;
    color: var(--text-color);
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

/* Header Styles */
header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 15px;
    border-bottom: 1px solid var(--light-gray);
}

header h1 {
    font-size: 24px;
    color: var(--primary-color);
}

nav ul {
    display: flex;
    list-style: none;
}

nav ul li {
    margin-left: 30px;
}

nav ul li a {
    text-decoration: none;
    color: var(--light-text);
    font-weight: 500;
    padding-bottom: 5px;
    position: relative;
    transition: var(--transition);
}

nav ul li a:hover {
    color: var(--primary-color);
}

nav ul li a.active {
    color: var(--primary-color);
}

nav ul li a.active::after {
    content: '';
    position: absolute;
    bottom: -3px;
    left: 0;
    width: 100%;
    height: 3px;
    background-color: var(--primary-color);
    border-radius: 3px;
}

/* Button Styles */
.btn {
    padding: 10px 20px;
    border: none;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: var(--transition);
    font-weight: 500;
}

.primary-btn {
    background-color: var(--primary-color);
    color: white;
}

.primary-btn:hover {
    background-color: var(--primary-dark);
}

.secondary-btn {
    background-color: var(--secondary-color);
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
}

.secondary-btn:hover {
    background-color: #e6eaff;
}

.danger-btn {
    background-color: var(--danger-color);
    color: white;
}

.danger-btn:hover {
    background-color: #e54242;
}

.text-btn {
    background: none;
    color: var(--primary-color);
    padding: 5px 10px;
}

.text-btn:hover {
    text-decoration: underline;
}

/* Section Styles */
.section {
    background-color: white;
    border-radius: 10px;
    box-shadow: var(--shadow);
    padding: 25px;
    margin-bottom: 25px;
    display: none;
}

.section.active {
    display: block;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
}

/* Profile Section */
.profile-container {
    width: 100%;
}

.profile-header {
    display: flex;
    gap: 30px;
    margin-bottom: 25px;
}

.profile-image-container {
    position: relative;
    width: 150px;
    height: 150px;
}

#profile-image {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
    border: 3px solid var(--primary-color);
}

.profile-image-overlay {
    position: absolute;
    bottom: 10px;
    right: 10px;
    width: 40px;
    height: 40px;
    background-color: var(--primary-color);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: var(--transition);
}

.profile-image-overlay:hover {
    background-color: var(--primary-dark);
}

.profile-image-overlay i {
    color: white;
    font-size: 18px;
}

.profile-details {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.profile-details h2 {
    font-size: 24px;
    margin-bottom: 5px;
}

.profile-details p {
    color: var(--light-text);
    margin-bottom: 15px;
}

.profile-info {
    background-color: var(--secondary-color);
    border-radius: var(--border-radius);
    padding: 20px;
}

.info-item {
    margin-bottom: 15px;
}

.info-item:last-child {
    margin-bottom: 0;
}

.info-label {
    font-weight: 600;
    margin-right: 10px;
    color: var(--light-text);
}

/* Orders Section */
.orders-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 15px;
}

.order-card {
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    padding: 15px;
    transition: var(--transition);
}

.order-card:hover {
    box-shadow: var(--shadow);
}

.order-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--light-gray);
}

.order-id {
    font-weight: 600;
}

.order-date {
    color: var(--light-text);
}

.order-details {
    margin-bottom: 15px;
}

.order-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
}

.order-item-name {
    font-weight: 500;
}

.order-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.order-status {
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
}

.status-delivered {
    background-color: #e7fff1;
    color: #2ab964;
}

.status-processing {
    background-color: #fff9e6;
    color: #ffb800;
}

.status-shipped {
    background-color: #e6f4ff;
    color: #0084ff;
}

.status-cancelled {
    background-color: #ffe6e6;
    color: #ff4a4a;
}

/* Addresses Section */
.addresses-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

.address-card {
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    padding: 20px;
    position: relative;
    transition: var(--transition);
}

.address-card:hover {
    box-shadow: var(--shadow);
}

.address-default-badge {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: var(--primary-color);
    color: white;
    padding: 3px 8px;
    border-radius: 20px;
    font-size: 12px;
}

.address-name {
    font-weight: 600;
    margin-bottom: 10px;
    font-size: 18px;
}

.address-details {
    color: var(--text-color);
    margin-bottom: 15px;
    line-height: 1.5;
}

.address-actions {
    display: flex;
    gap: 10px;
}

/* Settings Section */
.settings-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 20px;
}

.settings-card {
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    padding: 20px;
}

.settings-card h3 {
    margin-bottom: 15px;
}

/* Form Styles */
.form-group {
    margin-bottom: 15px;
}

.form-row {
    display: flex;
    gap: 15px;
}

.form-row .form-group {
    flex: 1;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: 500;
    color: var(--light-text);
}

input[type="text"],
input[type="email"],
input[type="password"],
input[type="tel"] {
    width: 100%;
    padding: 10px 15px;
    border: 1px solid var(--light-gray);
    border-radius: var(--border-radius);
    font-size: 16px;
    transition: var(--transition);
}

input[type="text"]:focus,
input[type="email"]:focus,
input[type="password"]:focus,
input[type="tel"]:focus {
    border-color: var(--primary-color);
    outline: none;
    box-shadow: 0 0 0 2px rgba(74, 107, 255, 0.2);
}

.checkbox-group {
    display: flex;
    align-items: center;
    gap: 10px;
}

.checkbox-group input[type="checkbox"] {
    width: 18px;
    height: 18px;
}

.checkbox-group label {
    margin-bottom: 0;
}

.otp-timer {
    margin-top: 5px;
    font-size: 14px;
    color: var(--light-text);
}

/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1001;
    background-color: white;
    border-radius: 10px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
}

.modal-content {
    width: 100%;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid var(--light-gray);
}

.modal-header h2 {
    font-size: 20px;
}

.close-modal {
    font-size: 24px;
    cursor: pointer;
    color: var(--light-text);
    transition: var(--transition);
}

.close-modal:hover {
    color: var(--text-color);
}

.modal-body {
    padding: 20px;
}

#overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
}

/* Toast Notifications */
#toast-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1002;
}

.toast {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-radius: var(--border-radius);
    margin-bottom: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    animation: slideIn 0.3s ease forwards;
    max-width: 350px;
}

.toast-success {
    background-color: #e7fff1;
    border-left: 4px solid var(--success-color);
}

.toast-error {
    background-color: #ffe6e6;
    border-left: 4px solid var(--danger-color);
}

.toast-info {
    background-color: #e6f4ff;
    border-left: 4px solid #0084ff;
}

.toast-icon {
    margin-right: 10px;
    font-size: 20px;
}

.toast-success .toast-icon {
    color: var(--success-color);
}

.toast-error .toast-icon {
    color: var(--danger-color);
}

.toast-info .toast-icon {
    color: #0084ff;
}

.toast-message {
    flex: 1;
}

@keyframes slideIn {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes slideOut {
    from {
        transform: translateX(0);
        opacity: 1;
    }
    to {
        transform: translateX(100%);
        opacity: 0;
    }
}

/* Responsive Styles */
@media (max-width: 768px) {
    header {
        flex-direction: column;
        align-items: flex-start;
    }

    nav ul {
        margin-top: 15px;
    }

    nav ul li {
        margin-left: 0;
        margin-right: 20px;
    }

    .profile-header {
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .form-row {
        flex-direction: column;
    }
}
    </style>
  </head>
<body>
    <div class="container">
        <header>
            <h1>User Profile System</h1>
            <nav>
                <ul>
                    <li><a href="#" id="profile-link" class="active">Profile</a></li>
                    <li><a href="#" id="orders-link">Orders</a></li>
                    <li><a href="#" id="addresses-link">Addresses</a></li>
                    <li><a href="#" id="settings-link">Settings</a></li>
                </ul>
            </nav>
        </header>

        <main>
            <!-- Profile Section -->
            <section id="profile-section" class="section active">
                <div class="profile-container">
                    <div class="profile-header">
                        <div class="profile-image-container">
                            <img id="profile-image" src="https://via.placeholder.com/150" alt="Profile Image">
                            <div class="profile-image-overlay">
                                <i class="fas fa-camera"></i>
                            </div>
                            <input type="file" id="profile-image-upload" accept="image/*" hidden>
                        </div>
                        <div class="profile-details">
                            <h2 id="user-name">John Doe</h2>
                            <p id="user-email">john.doe@example.com</p>
                            <button id="edit-profile-btn" class="btn primary-btn">Edit Profile</button>
                        </div>
                    </div>
                    <div class="profile-info">
                        <div class="info-item">
                            <span class="info-label">Phone:</span>
                            <span id="user-phone">+1 234 567 8901</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Default Address:</span>
                            <span id="user-address">123 Main St, Apt 4B, New York, NY 10001</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Member Since:</span>
                            <span id="user-member-since">January 1, 2023</span>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Orders Section -->
            <section id="orders-section" class="section">
                <h2>Your Orders</h2>
                <div class="orders-container" id="orders-list">
                    <!-- Orders will be populated here -->
                </div>
            </section>

            <!-- Addresses Section -->
            <section id="addresses-section" class="section">
                <div class="section-header">
                    <h2>Your Addresses</h2>
                    <button id="add-address-btn" class="btn primary-btn"><i class="fas fa-plus"></i> Add Address</button>
                </div>
                <div class="addresses-container" id="addresses-list">
                    <!-- Addresses will be populated here -->
                </div>
            </section>

            <!-- Settings Section -->
            <section id="settings-section" class="section">
                <h2>Account Settings</h2>
                <div class="settings-container">
                    <div class="settings-card">
                        <h3>Change Password</h3>
                        <form id="change-password-form">
                            <div class="form-group">
                                <label for="current-password">Current Password</label>
                                <input type="password" id="current-password" required>
                            </div>
                            <div class="form-group">
                                <label for="new-password">New Password</label>
                                <input type="password" id="new-password" required>
                            </div>
                            <div class="form-group">
                                <label for="confirm-password">Confirm New Password</label>
                                <input type="password" id="confirm-password" required>
                            </div>
                            <button type="submit" class="btn primary-btn">Update Password</button>
                        </form>
                    </div>
                </div>
            </section>
        </main>
    </div>

    <!-- Edit Profile Modal -->
    <div id="edit-profile-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Edit Profile</h2>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <form id="edit-profile-form">
                    <div class="form-group">
                        <label for="edit-name">Full Name</label>
                        <input type="text" id="edit-name" required>
                    </div>
                    <div class="form-group">
                        <label for="edit-email">Email</label>
                        <input type="email" id="edit-email" required>
                        <button type="button" id="verify-email-btn" class="btn secondary-btn">Verify Email</button>
                    </div>
                    <div id="email-verification-container" class="form-group" style="display: none;">
                        <label for="email-otp">Enter OTP sent to your email</label>
                        <input type="text" id="email-otp" required>
                        <div class="otp-timer">OTP expires in <span id="otp-countdown">05:00</span></div>
                        <button type="button" id="resend-otp-btn" class="btn text-btn">Resend OTP</button>
                    </div>
                    <div class="form-group">
                        <label for="edit-phone">Phone Number</label>
                        <input type="tel" id="edit-phone" required>
                    </div>
                    <button type="submit" class="btn primary-btn">Save Changes</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Add/Edit Address Modal -->
    <div id="address-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="address-modal-title">Add New Address</h2>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <form id="address-form">
                    <input type="hidden" id="address-id">
                    <div class="form-group">
                        <label for="address-name">Address Name (e.g., Home, Work)</label>
                        <input type="text" id="address-name" required>
                    </div>
                    <div class="form-group">
                        <label for="address-line1">Address Line 1</label>
                        <input type="text" id="address-line1" required>
                    </div>
                    <div class="form-group">
                        <label for="address-line2">Address Line 2 (Optional)</label>
                        <input type="text" id="address-line2">
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="address-city">City</label>
                            <input type="text" id="address-city" required>
                        </div>
                        <div class="form-group">
                            <label for="address-state">State/Province</label>
                            <input type="text" id="address-state" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="address-zip">ZIP/Postal Code</label>
                            <input type="text" id="address-zip" required>
                        </div>
                        <div class="form-group">
                            <label for="address-country">Country</label>
                            <input type="text" id="address-country" required>
                        </div>
                    </div>
                    <div class="form-group checkbox-group">
                        <input type="checkbox" id="address-default">
                        <label for="address-default">Set as default address</label>
                    </div>
                    <button type="submit" class="btn primary-btn">Save Address</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Forgot Password Modal -->
    <div id="forgot-password-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Reset Password</h2>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <form id="forgot-password-form">
                    <div class="form-group">
                        <label for="reset-email">Email Address</label>
                        <input type="email" id="reset-email" required>
                    </div>
                    <button type="submit" class="btn primary-btn">Send Reset Link</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Overlay for modals -->
    <div id="overlay"></div>

    <!-- Toast notifications -->
    <div id="toast-container"></div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
    // Initialize the app
    initApp();
});

// Mock data for demonstration
const userData = {
    id: 'user123',
    name: 'John Doe',
    email: 'john.doe@example.com',
    phone: '+1 234 567 8901',
    memberSince: 'January 1, 2023',
    profileImage: 'https://via.placeholder.com/150'
};

const orderData = [
    {
        id: 'ORD-2023-001',
        date: '2023-02-15',
        items: [
            { name: 'Product 1', quantity: 2, price: 25.99 },
            { name: 'Product 2', quantity: 1, price: 49.99 }
        ],
        total: 101.97,
        status: 'delivered'
    },
    {
        id: 'ORD-2023-002',
        date: '2023-03-20',
        items: [
            { name: 'Product 3', quantity: 1, price: 129.99 }
        ],
        total: 129.99,
        status: 'shipped'
    },
    {
        id: 'ORD-2023-003',
        date: '2023-04-05',
        items: [
            { name: 'Product 4', quantity: 3, price: 15.99 },
            { name: 'Product 5', quantity: 1, price: 89.99 }
        ],
        total: 137.96,
        status: 'processing'
    }
];

let addressData = [
    {
        id: 'addr1',
        name: 'Home',
        line1: '123 Main St',
        line2: 'Apt 4B',
        city: 'New York',
        state: 'NY',
        zip: '10001',
        country: 'USA',
        isDefault: true
    },
    {
        id: 'addr2',
        name: 'Work',
        line1: '456 Business Ave',
        line2: 'Suite 300',
        city: 'New York',
        state: 'NY',
        zip: '10022',
        country: 'USA',
        isDefault: false
    }
];

// Function to initialize the app
function initApp() {
    // Load user data
    loadUserData();
    
    // Load orders
    loadOrders();
    
    // Load addresses
    loadAddresses();
    
    // Setup navigation
    setupNavigation();
    
    // Setup event listeners
    setupEventListeners();
}

// Function to load user data
function loadUserData() {
    document.getElementById('user-name').textContent = userData.name;
    document.getElementById('user-email').textContent = userData.email;
    document.getElementById('user-phone').textContent = userData.phone;
    document.getElementById('user-member-since').textContent = userData.memberSince;
    document.getElementById('profile-image').src = userData.profileImage;
    
    // Set default address
    const defaultAddress = addressData.find(addr => addr.isDefault);
    if (defaultAddress) {
        document.getElementById('user-address').textContent = formatAddress(defaultAddress);
    }
}

// Function to load orders
function loadOrders() {
    const ordersList = document.getElementById('orders-list');
    ordersList.innerHTML = '';
    
    if (orderData.length === 0) {
        ordersList.innerHTML = '<p class="no-data">No orders found.</p>';
        return;
    }
    
    orderData.forEach(order => {
        const orderCard = document.createElement('div');
        orderCard.className = 'order-card';
        
        const formattedDate = new Date(order.date).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        
        let itemsHtml = '';
        order.items.forEach(item => {
            itemsHtml += `
                <div class="order-item">
                    <span class="order-item-name">${item.name} x${item.quantity}</span>
                    <span class="order-item-price">$${(item.price * item.quantity).toFixed(2)}</span>
                </div>
            `;
        });
        
        orderCard.innerHTML = `
            <div class="order-header">
                <span class="order-id">${order.id}</span>
                <span class="order-date">${formattedDate}</span>
            </div>
            <div class="order-details">
                ${itemsHtml}
            </div>
            <div class="order-footer">
                <span class="order-total">Total: $${order.total.toFixed(2)}</span>
                <span class="order-status status-${order.status}">${order.status.charAt(0).toUpperCase() + order.status.slice(1)}</span>
            </div>
            <div class="order-actions">
                <button class="btn text-btn">View Details</button>
                ${order.status !== 'delivered' && order.status !== 'cancelled' ? 
                    `<button class="btn text-btn cancel-order" data-id="${order.id}">Cancel Order</button>` : ''}
            </div>
        `;
        
        ordersList.appendChild(orderCard);
    });
    
    // Add event listeners for cancel order buttons
    document.querySelectorAll('.cancel-order').forEach(button => {
        button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-id');
            cancelOrder(orderId);
        });
    });
}

// Function to load addresses
function loadAddresses() {
    const addressesList = document.getElementById('addresses-list');
    addressesList.innerHTML = '';
    
    if (addressData.length === 0) {
        addressesList.innerHTML = '<p class="no-data">No addresses found.</p>';
        return;
    }
    
    addressData.forEach(address => {
        const addressCard = document.createElement('div');
        addressCard.className = 'address-card';
        
        const addressDetails = formatAddress(address);
        
        addressCard.innerHTML = `
            ${address.isDefault ? '<span class="address-default-badge">Default</span>' : ''}
            <h3 class="address-name">${address.name}</h3>
            <p class="address-details">${addressDetails}</p>
            <div class="address-actions">
                <button class="btn secondary-btn edit-address" data-id="${address.id}">Edit</button>
                <button class="btn danger-btn delete-address" data-id="${address.id}">Delete</button>
            </div>
        `;
        
        addressesList.appendChild(addressCard);
    });
    
    // Add event listeners for address actions
    document.querySelectorAll('.edit-address').forEach(button => {
        button.addEventListener('click', function() {
            const addressId = this.getAttribute('data-id');
            editAddress(addressId);
        });
    });
    
    document.querySelectorAll('.delete-address').forEach(button => {
        button.addEventListener('click', function() {
            const addressId = this.getAttribute('data-id');
            deleteAddress(addressId);
        });
    });
}

// Function to setup navigation
function setupNavigation() {
    const navLinks = document.querySelectorAll('nav ul li a');
    const sections = document.querySelectorAll('.section');
    
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Remove active class from all links and sections
            navLinks.forEach(link => link.classList.remove('active'));
            sections.forEach(section => section.classList.remove('active'));
            
            // Add active class to clicked link
            this.classList.add('active');
            
            // Get the section ID from the link ID
            const sectionId = this.id.replace('-link', '-section');
            
            // Add active class to corresponding section
            document.getElementById(sectionId).classList.add('active');
        });
    });
}

// Function to setup all event listeners
function setupEventListeners() {
    // Profile image upload
    const profileImageOverlay = document.querySelector('.profile-image-overlay');
    const profileImageUpload = document.getElementById('profile-image-upload');
    
    profileImageOverlay.addEventListener('click', function() {
        profileImageUpload.click();
    });
    
    profileImageUpload.addEventListener('change', function() {
        if (this.files && this.files[0]) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                document.getElementById('profile-image').src = e.target.result;
                userData.profileImage = e.target.result;
            };
            
            reader.readAsDataURL(this.files[0]);
            
            // Show success toast
            showToast('Profile image updated successfully!', 'success');
        }
    });
    
    // Edit profile button
    document.getElementById('edit-profile-btn').addEventListener('click', function() {
        openEditProfileModal();
    });
    
    // Add address button
    document.getElementById('add-address-btn').addEventListener('click', function() {
        openAddAddressModal();
    });
    
    // Change password form
    document.getElementById('change-password-form').addEventListener('submit', function(e) {
        e.preventDefault();
        changePassword();
    });
    
    // Edit profile form
    document.getElementById('edit-profile-form').addEventListener('submit', function(e) {
        e.preventDefault();
        saveProfileChanges();
    });
    
    // Verify email button
    document.getElementById('verify-email-btn').addEventListener('click', function() {
        verifyEmail();
    });
    
    // Resend OTP button
    document.getElementById('resend-otp-btn').addEventListener('click', function() {
        sendEmailOTP();
    });
    
    // Address form
    document.getElementById('address-form').addEventListener('submit', function(e) {
        e.preventDefault();
        saveAddress();
    });
    
    // Close modal buttons
    document.querySelectorAll('.close-modal').forEach(button => {
        button.addEventListener('click', function() {
            closeAllModals();
        });
    });
    
    // Overlay click to close modals
    document.getElementById('overlay').addEventListener('click', function() {
        closeAllModals();
    });
}

// Function to format address
function formatAddress(address) {
    let formattedAddress = address.line1;
    
    if (address.line2) {
        formattedAddress += `, ${address.line2}`;
    }
    
    formattedAddress += `, ${address.city}, ${address.state} ${address.zip}, ${address.country}`;
    
    return formattedAddress;
}

// Function to open edit profile modal
function openEditProfileModal() {
    // Fill form with current user data
    document.getElementById('edit-name').value = userData.name;
    document.getElementById('edit-email').value = userData.email;
    document.getElementById('edit-phone').value = userData.phone;
    
    // Hide email verification container
    document.getElementById('email-verification-container').style.display = 'none';
    
    // Show modal and overlay
    document.getElementById('edit-profile-modal').style.display = 'block';
    document.getElementById('overlay').style.display = 'block';
}

// Function to open add address modal
function openAddAddressModal() {
    // Clear form
    document.getElementById('address-form').reset();
    document.getElementById('address-id').value = '';
    document.getElementById('address-modal-title').textContent = 'Add New Address';
    
    // Show modal and overlay
    document.getElementById('address-modal').style.display = 'block';
    document.getElementById('overlay').style.display = 'block';
}

// Function to open edit address modal
function editAddress(addressId) {
    const address = addressData.find(addr => addr.id === addressId);
    
    if (address) {
        // Fill form with address data
        document.getElementById('address-id').value = address.id;
        document.getElementById('address-name').value = address.name;
        document.getElementById('address-line1').value = address.line1;
        document.getElementById('address-line2').value = address.line2 || '';
        document.getElementById('address-city').value = address.city;
        document.getElementById('address-state').value = address.state;
        document.getElementById('address-zip').value = address.zip;
        document.getElementById('address-country').value = address.country;
        document.getElementById('address-default').checked = address.isDefault;
        
        // Update modal title
        document.getElementById('address-modal-title').textContent = 'Edit Address';
        
        // Show modal and overlay
        document.getElementById('address-modal').style.display = 'block';
        document.getElementById('overlay').style.display = 'block';
    }
}

// Function to delete address
function deleteAddress(addressId) {
    const address = addressData.find(addr => addr.id === addressId);
    
    if (address) {
        // If it's the default address, show error
        if (address.isDefault) {
            showToast('Cannot delete default address. Please set another address as default first.', 'error');
            return;
        }
        
        // Remove address from data
        addressData = addressData.filter(addr => addr.id !== addressId);
        
        // Reload addresses
        loadAddresses();
        
        // Show success toast
        showToast('Address deleted successfully!', 'success');
    }
}

// Function to close all modals
function closeAllModals() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.style.display = 'none';
    });
    
    document.getElementById('overlay').style.display = 'none';
}

// Function to save profile changes
function saveProfileChanges() {
    const newName = document.getElementById('edit-name').value;
    const newEmail = document.getElementById('edit-email').value;
    const newPhone = document.getElementById('edit-phone').value;
    
    // Check if email has changed
    const emailChanged = newEmail !== userData.email;
    
    // If email has changed, verify it first
    if (emailChanged && !document.getElementById('email-verification-container').style.display === 'block') {
        verifyEmail();
        return;
    }
    
    // If email has changed and verification is showing, check OTP
    if (emailChanged && document.getElementById('email-verification-container').style.display === 'block') {
        const otp = document.getElementById('email-otp').value;
        
        // Simulate OTP verification
        if (otp === '123456') { // This would be replaced with actual verification in a real app
            // Update user data
            userData.name = newName;
            userData.email = newEmail;
            userData.phone = newPhone;
            
            // Reload user data
            loadUserData();
            
            // Close modal
            closeAllModals();
            
            // Show success toast
            showToast('Profile updated successfully!', 'success');
        } else {
            showToast('Invalid OTP. Please try again.', 'error');
        }
    } else {
        // No email change, update directly
        userData.name = newName;
        userData.phone = newPhone;
        
        // Reload user data
        loadUserData();
        
        // Close modal
        closeAllModals();
        
        // Show success toast
        showToast('Profile updated successfully!', 'success');
    }
}

// Function to verify email
function verifyEmail() {
    const newEmail = document.getElementById('edit-email').value;
    
    // Check if email is valid
    if (!isValidEmail(newEmail)) {
        showToast('Please enter a valid email address.', 'error');
        return;
    }
    
    // Check if email has changed
    if (newEmail === userData.email) {
        showToast('Email address is unchanged.', 'info');
        return;
    }
    
    // Show email verification container
    document.getElementById('email-verification-container').style.display = 'block';
    
    // Send OTP
    sendEmailOTP();
}

// Function to send email OTP
function sendEmailOTP() {
    // Simulate sending OTP (this would be an API call in a real app)
    showToast('OTP sent to your email!', 'success');
    
    // Start countdown
    startOTPCountdown();
}

// Function to start OTP countdown
function startOTPCountdown() {
    let minutes = 5;
    let seconds = 0;
    const countdownElement = document.getElementById('otp-countdown');
    
    // Update countdown every second
    const countdownInterval = setInterval(function() {
        if (seconds === 0) {
            if (minutes === 0) {
                clearInterval(countdownInterval);
                countdownElement.textContent = '00:00';
                showToast('OTP expired. Please request a new one.', 'info');
                return;
            }
            minutes--;
            seconds = 59;
        } else {
            seconds--;
        }
        
        // Format countdown
        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
        const formattedSeconds = seconds < 10 ? `0${seconds}` : seconds;
        
        countdownElement.textContent = `${formattedMinutes}:${formattedSeconds}`;
    }, 1000);
}

// Function to save address
function saveAddress() {
    const addressId = document.getElementById('address-id').value;
    const name = document.getElementById('address-name').value;
    const line1 = document.getElementById('address-line1').value;
    const line2 = document.getElementById('address-line2').value;
    const city = document.getElementById('address-city').value;
    const state = document.getElementById('address-state').value;
    const zip = document.getElementById('address-zip').value;
    const country = document.getElementById('address-country').value;
    const isDefault = document.getElementById('address-default').checked;
    
    // Create address object
    const address = {
        id: addressId || `addr${Date.now()}`,
        name,
        line1,
        line2,
        city,
        state,
        zip,
        country,
        isDefault
    };
    
    // If setting as default, update other addresses
    if (isDefault) {
        addressData.forEach(addr => {
            addr.isDefault = false;
        });
    }
    
    // If editing existing address
    if (addressId) {
        // Update address
        const index = addressData.findIndex(addr => addr.id === addressId);
        if (index !== -1) {
            addressData[index] = address;
        }
    } else {
        // Add new address
        addressData.push(address);
    }
    
    // Reload addresses
    loadAddresses();
    
    // Update user address if default
    if (isDefault) {
        document.getElementById('user-address').textContent = formatAddress(address);
    }
    
    // Close modal
    closeAllModals();
    
    // Show success toast
    showToast(`Address ${addressId ? 'updated' : 'added'} successfully!`, 'success');
}

// Function to change password
function changePassword() {
    const currentPassword = document.getElementById('current-password').value;
    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    
    // Check if current password is correct (this would be an API call in a real app)
    if (currentPassword !== 'password123') { // Dummy check, would be replaced with actual verification
        showToast('Current password is incorrect.', 'error');
        return;
    }
    
    // Check if passwords match
    if (newPassword !== confirmPassword) {
        showToast('New passwords do not match.', 'error');
        return;
    }
    
    // Check if password meets requirements
    if (newPassword.length < 8) {
        showToast('Password must be at least 8 characters long.', 'error');
        return;
    }
    
    // Clear form
    document.getElementById('change-password-form').reset();
    
    // Show success toast
    showToast('Password changed successfully!', 'success');
}

// Function to cancel order
function cancelOrder(orderId) {
    // Find order
    const orderIndex = orderData.findIndex(order => order.id === orderId);
    
    if (orderIndex !== -1) {
        // Update order status
        orderData[orderIndex].status = 'cancelled';
        
        // Reload orders
        loadOrders();
        
        // Show success toast
        showToast('Order cancelled successfully!', 'success');
    }
}

// Function to show toast notification
function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toast-container');
    
    // Create toast element
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    // Get icon based on type
    let icon = '';
    switch (type) {
        case 'success':
            icon = 'check-circle';
            break;
        case 'error':
            icon = 'times-circle';
            break;
        default:
            icon = 'info-circle';
    }
    
    // Set toast content
    toast.innerHTML = `
        <div class="toast-icon">
            <i class="fas fa-${icon}"></i>
        </div>
        <div class="toast-message">${message}</div>
    `;
    
    // Add toast to container
    toastContainer.appendChild(toast);
    
    // Remove toast after 5 seconds
    setTimeout(function() {
        toast.style.animation = 'slideOut 0.3s ease forwards';
        
        // Remove from DOM after animation completes
        setTimeout(function() {
            toast.remove();
        }, 300);
    }, 5000);
}

// Helper function to check if email is valid
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}
    </script>
</body>
</html>