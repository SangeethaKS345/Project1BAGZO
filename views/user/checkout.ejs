<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Checkout - Your Store</title>
  <link rel="stylesheet" href="https://unpkg.com/izitoast/dist/css/iziToast.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="/css/checkout.css">
  <style>
    /* GOOGLE FONTS */
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

    .coupon-section {
      margin: 20px 0;
    }
    .coupon-input-group {
      display: flex;
      gap: 10px;
    }
    .coupon-input {
      padding: 8px;
      width: 200px;
    }
    .coupon-btn {
      background-color: #4CAF50;
      color: white;
    }
    .coupon-message {
      margin-top: 10px;
    }
    .available-coupons {
      margin-top: 20px;
    }
    .coupon-list {
      list-style: none;
      padding: 0;
    }
    .coupon-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      border: 1px solid #ddd;
      margin-bottom: 10px;
      border-radius: 5px;
    }
    .coupon-details p {
      margin: 5px 0;
      font-size: 0.9em;
    }
    .apply-coupon-btn {
      background-color: #4CAF50;
      color: white;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      border-radius: 3px;
    }
    .apply-coupon-btn:hover {
      background-color: #45a049;
    }
  </style>
  <%- include('../../views/partials/user/header') %>
  <link rel="stylesheet" href="/css/sweetalert2.min.css">
</head>

<body>
  <main class="main">
    <section class="breadcrumb">
      <div class="container">
        <ul class="breadcrumb__list">
          <li><a href="/" class="breadcrumb__link">Home</a></li>
          <li><span class="breadcrumb__divider">></span></li>
          <li><a href="/cart" class="breadcrumb__link">Cart</a></li>
          <li><span class="breadcrumb__divider">></span></li>
          <li><span class="breadcrumb__current">Checkout</span></li>
        </ul>
      </div>
    </section>

    <section class="checkout section">
      <div class="container">
        <div class="checkout__container">
          <% if (typeof error !== 'undefined' && error) { %>
          <div class="alert alert-danger" role="alert">
            <%= error %>
          </div>
          <% } %>

          <div class="checkout__group address-group">
            <h3 class="section__title">Select Delivery Address</h3>
            <div class="address__list" id="addressList">
              <% if (addresses && Array.isArray(addresses) && addresses.length > 0) { %>
              <% addresses.forEach((address, index) => { %>
              <div class="address__item">
                <input type="radio" name="address" id="address<%= index + 1 %>" value="<%= address._id %>" class="address__radio" <%= index === 0 ? 'checked' : '' %>>
                <label for="address<%= index + 1 %>" class="address__label">
                  <div class="address__details">
                    <h4 class="address__name"><%= address.addressType || 'Address' %></h4>
                    <p class="address__text"><%= address.name || '' %></p>
                    <p class="address__text"><%= address.city || '' %>, <%= address.state || '' %> <%= address.pincode || '' %></p>
                    <p class="address__text">Landmark: <%= address.landMark || 'N/A' %></p>
                    <p class="address__text">Phone: <%= address.phone || 'N/A' %></p>
                    <p class="address__text">Alt Phone: <%= address.altPhone || 'N/A' %></p>
                  </div>
                </label>
              </div>
              <% }); %>
              <% } else { %>
              <div class="no-address">
                <p>No delivery addresses available. Please add one to proceed.</p>
                <a href="/address/new" class="gradient-btn">Add New Address</a>
              </div>
              <% } %>
            </div>

            <a href="/address/new" class="add-address-link">
              <button class="btn add__address-btn">
                <i class="fas fa-plus"></i> Add New Address
              </button>
            </a>

            <div class="payment-options">
              <h3 class="section__title">Payment Method</h3>
              <div class="payment-option">
                <input type="radio" id="cod" name="paymentMethod" value="cod" class="payment-radio" checked>
                <label for="cod" class="payment-label">
                  <i class="fas fa-money-bill-wave payment-icon"></i>
                  <span class="payment-text">Cash on Delivery</span>
                </label>
              </div>
              <div class="payment-option">
                <input type="radio" id="razorpay" name="paymentMethod" value="razorpay" class="payment-radio">
                <label for="razorpay" class="payment-label">
                  <i class="fas fa-credit-card payment-icon"></i>
                  <span class="payment-text">Razorpay</span>
                </label>
              </div>
              <div class="payment-option">
                <input type="radio" id="wallet" name="paymentMethod" value="wallet" class="payment-radio">
                <label for="wallet" class="payment-label">
                  <i class="fas fa-wallet payment-icon"></i>
                  <span class="payment-text">Wallet (Balance: ₹<span id="walletBalance"><%= walletBalance || 0 %></span>)</span>
                </label>
              </div>
            </div>
          </div>

          <div class="checkout__group cart-summary">
            <h3 class="section__title">Cart Summary</h3>
            <div class="cart-items" id="cartItems">
              <% if (cartItems && cartItems.length > 0) { %>
                <% cartItems.forEach((item, i) => { %>
                  <div class="cart-item">
                    <div class="item-image">
                      <img src="/uploads/re-image/<%= item.productDetails.productImage[0] || 'default.jpg' %>" alt="<%= item.productDetails.productName || 'Product' %>">
                    </div>
                    <div class="item-details">
                      <h3 class="item-name"><%= item.productDetails.productName || 'Unknown Product' %></h3>
                      <p class="item-meta">
                        <%= item.categoryDetails ? item.categoryDetails.name : 'Unknown Category' %> |
                        <%= item.brandDetails ? item.brandDetails.brandName : 'Unknown Brand' %>
                      </p>
                      <div class="item-price">
                        <span class="price-label">Regular Price:</span>
                        <span class="price-value">₹<%= Math.round(item.productDetails.regularPrice) %></span>
                      </div>
                      <div class="item-price">
                        <span class="price-label">Final Price:</span>
                        <span class="price-value">₹<%= Math.round(item.productDetails.finalPrice) %></span>
                      </div>
                      <div class="item-quantity">
                        <span>Quantity: <%= item.quantity || 0 %></span>
                      </div>
                    </div>
                  </div>
                <% }); %>
              <% } else { %>
                <div class="empty-cart">
                  <h2>Your Cart is Empty</h2>
                  <p>Please add items to your cart before checking out.</p>
                  <a href="/shop" class="shop-now-btn">Shop Now</a>
                </div>
              <% } %>
            </div>
            
            

            <div class="coupon-section">
              <h3 class="section__title">Apply Coupon</h3>
              <div class="coupon-input-group">
                <input type="text" id="couponCode" placeholder="Enter coupon code" class="coupon-input">
                <button id="applyCouponBtn" class="btn coupon-btn">Apply</button>
              </div>
              <p id="couponMessage" class="coupon-message"></p>
              <input type="hidden" id="appliedCoupon" name="couponCode" value="">
            
              <% if (coupons && coupons.length > 0) { %>
                <div class="available-coupons">
                  <h4>Available Coupons</h4>
                  <ul class="coupon-list">
                    <% coupons.forEach(coupon => { %>
                      <li class="coupon-item">
                        <div class="coupon-details">
                          <strong><%= coupon.code %></strong> - ₹<%= coupon.offerPrice %> off
                          <p>Min. purchase: ₹<%= coupon.minimumPrice %> | Expires: <%= coupon.expireOn.toLocaleDateString() %></p>
                          <p><%= coupon.description %></p>
                        </div>
                        <button class="apply-coupon-btn" data-code="<%= coupon.code %>">Apply</button>
                      </li>
                    <% }); %>
                  </ul>
                </div>
              <% } else { %>
                <p>No available coupons at this time.</p>
              <% } %>
            </div>

            <div class="order-summary">
              <div class="summary-row">
                <span>Subtotal</span>
                <span id="subtotal">₹<%= cartSubtotal %></span>
              </div>
              <div class="summary-row" id="cartDiscountRow" style="display: <%= cartDiscount > 0 ? 'flex' : 'none' %>;">
                <span>Cart Discount</span>
                <span id="cartDiscount">-₹<%= cartDiscount %></span>
              </div>
              <div class="summary-row" id="couponDiscountRow" style="display: none;">
                <span>Coupon Discount</span>
                <span id="couponDiscount">₹0</span>
              </div>
              <div class="summary-row">
                <span>Shipping</span>
                <span>Free</span>
              </div>
              <div class="summary-row total">
                <span>Total</span>
                <span id="total">₹<%= finalAmount %></span>
              </div>
            </div>

            <form id="orderForm" action="/place-order" method="POST">
              <input type="hidden" name="addressId" id="selectedAddressId" value="" />
              <input type="hidden" name="paymentMethod" id="selectedPaymentMethod" value="cod" />
              <input type="hidden" name="couponCode" id="couponCodeInput" value="">
              <button type="submit" class="btn place-order__btn">Place Order</button>
            </form>
          </div>
        </div>
      </div>
    </section>
  </main>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script src="https://unpkg.com/izitoast/dist/js/iziToast.min.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      initAddressSelection();
      initPaymentMethodSelection();
      setupOrderForm();
      initWalletValidation();
      updateCODAvailability(); // NEW: Check COD availability on load

      // Add coupon input Enter key listener
      document.getElementById('couponCode').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          applyCoupon();
        }
      });

      // Add listeners for available coupon buttons
      document.querySelectorAll('.apply-coupon-btn').forEach(button => {
        button.addEventListener('click', function() {
          const couponCode = this.getAttribute('data-code');
          document.getElementById('couponCode').value = couponCode;
          applyCoupon();
        });
      });
    });

    function initAddressSelection() {
      const addressRadios = document.querySelectorAll('input[name="address"]');
      const selectedAddressInput = document.getElementById("selectedAddressId");

      if (addressRadios.length > 0) {
        const checkedRadio = Array.from(addressRadios).find(radio => radio.checked) || addressRadios[0];
        if (checkedRadio) {
          selectedAddressInput.value = checkedRadio.value;
        }
      }

      addressRadios.forEach((radio) => {
        radio.addEventListener("change", function() {
          selectedAddressInput.value = this.value;
          highlightSelectedAddress(this);
        });
      });
    }

    function highlightSelectedAddress(selectedRadio) {
      document.querySelectorAll('.address__label').forEach(label => {
        label.classList.remove('address__label--selected');
      });

      const selectedLabel = document.querySelector(`label[for="${selectedRadio.id}"]`);
      if (selectedLabel) {
        selectedLabel.classList.add('address__label--selected');
      }
    }

    function initPaymentMethodSelection() {
      const paymentRadios = document.querySelectorAll('input[name="paymentMethod"]');
      const selectedPaymentMethodInput = document.getElementById("selectedPaymentMethod");

      paymentRadios.forEach((radio) => {
        if (!radio.disabled) {
          radio.addEventListener("change", function() {
            selectedPaymentMethodInput.value = this.value;
          });
        }
      });
    }

    function checkCartQuantities() {
      const cartItems = document.querySelectorAll('#cartItems .cart-item');
      let exceedsLimit = false;
      let excessProducts = [];

      cartItems.forEach(item => {
        const quantitySpan = item.querySelector('.item-quantity span');
        if (quantitySpan) {
          const quantityText = quantitySpan.textContent.replace('Quantity: ', '').trim();
          const quantity = parseInt(quantityText) || 0;
          if (quantity > 5) {
            exceedsLimit = true;
            const productTitle = item.querySelector('.item-name').textContent;
            excessProducts.push(productTitle);
          }
        }
      });

      if (exceedsLimit) {
        Swal.fire({
          icon: 'error',
          title: 'Quantity Limit Exceeded',
          text: `You cannot checkout with more than 5 items per product. Please adjust quantities for: ${excessProducts.join(', ')}.`,
        });
        return false;
      }
      return true;
    }

    // NEW: Function to enable/disable COD based on total amount
    function updateCODAvailability() {
      const totalAmount = parseFloat(document.getElementById('total').textContent.replace('₹', '')) || 0;
      const codRadio = document.getElementById('cod');
      const codLabel = document.querySelector('label[for="cod"]');
      
      if (totalAmount > 5000) {
        codRadio.disabled = true;
        codLabel.style.opacity = '0.5'; // Visual cue for disabled state
        codLabel.title = 'COD not available for orders above ₹5000'; // Tooltip
        if (codRadio.checked) {
          // If COD was selected, switch to another available option
          const razorpayRadio = document.getElementById('razorpay');
          if (!razorpayRadio.disabled) {
            razorpayRadio.checked = true;
            document.getElementById('selectedPaymentMethod').value = 'razorpay';
          } else {
            const walletRadio = document.getElementById('wallet');
            if (!walletRadio.disabled) {
              walletRadio.checked = true;
              document.getElementById('selectedPaymentMethod').value = 'wallet';
            }
          }
        }
      } else {
        codRadio.disabled = false;
        codLabel.style.opacity = '1';
        codLabel.title = ''; // Remove tooltip when enabled
      }
    }

    function setupOrderForm() {
      const orderForm = document.getElementById('orderForm');
      if (!orderForm) {
        console.error("Order form not found!");
        return;
      }

      orderForm.addEventListener('submit', function(e) {
        e.preventDefault();

        if (!checkCartQuantities()) {
          return;
        }

        const selectedAddressInput = document.getElementById("selectedAddressId");
        const selectedPaymentMethodInput = document.getElementById("selectedPaymentMethod");
        const addressId = selectedAddressInput.value;
        const paymentMethod = selectedPaymentMethodInput.value;

        if (!addressId) {
          showError('Please select a delivery address');
          return;
        }

        const submitButton = this.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
        submitButton.disabled = true;

        submitOrder(addressId, paymentMethod, function() {
          submitButton.innerHTML = originalButtonText;
          submitButton.disabled = false;
        });
      });
    }

    function initWalletValidation() {
      const walletRadio = document.getElementById('wallet');
      const walletBalanceSpan = document.getElementById('walletBalance');
      const totalAmount = parseFloat(document.getElementById('total').textContent.replace('₹', '')) || 0;

      walletRadio.addEventListener('change', function() {
        const walletBalance = parseFloat(walletBalanceSpan.textContent) || 0;
        if (this.checked && walletBalance < totalAmount) {
          Swal.fire({
            icon: 'error',
            title: 'Insufficient Wallet Balance',
            text: 'Your wallet balance is not enough to cover the total amount.',
          });
          document.getElementById('cod').checked = true; // Fallback to COD
          document.getElementById('selectedPaymentMethod').value = 'cod';
        }
      });
    }

  function applyCoupon() {
  const couponCode = document.getElementById('couponCode').value.trim();
  const subtotal = parseFloat(document.getElementById('total').textContent.replace('₹', '')); // Use current total (after cart discount)

  if (!couponCode) {
    document.getElementById('couponMessage').textContent = 'Please enter a coupon code';
    return;
  }

  fetch('/apply-coupon', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ couponCode, subtotal })
  })
  .then(response => response.json())
  .then(data => {
    const couponMessage = document.getElementById('couponMessage');
    if (data.success) {
      const discount = data.discount;
      const currentTotal = parseFloat(document.getElementById('total').textContent.replace('₹', ''));
      const finalAmount = currentTotal - discount;

      document.getElementById('couponDiscount').textContent = `-₹${Math.round(discount)}`;
      document.getElementById('couponDiscountRow').style.display = 'flex';
      document.getElementById('total').textContent = `₹${Math.round(finalAmount)}`;
      document.getElementById('couponMessage').textContent = 'Coupon applied successfully!';
      document.getElementById('couponMessage').style.color = 'green';
      document.getElementById('appliedCoupon').value = couponCode;
      document.getElementById('couponCodeInput').value = couponCode;
      updateCODAvailability(); // Recheck COD availability after coupon applied
    } else {
      couponMessage.textContent = data.message;
      couponMessage.style.color = 'red';
      resetCouponDisplay();
    }
  })
  .catch(error => {
    document.getElementById('couponMessage').textContent = 'Error applying coupon';
    resetCouponDisplay();
  });
}

function resetCouponDisplay() {
  document.getElementById('couponDiscountRow').style.display = 'none';
  document.getElementById('couponDiscount').textContent = '₹0';
  document.getElementById('total').textContent = `₹<%= finalAmount %>`; // Reset to finalAmount before coupon
  document.getElementById('appliedCoupon').value = '';
  document.getElementById('couponCodeInput').value = '';
  updateCODAvailability(); // Recheck COD availability after reset
}

  document.getElementById('applyCouponBtn').addEventListener('click', applyCoupon);

  function submitOrder(addressId, paymentMethod, callback) {
    const formData = {
      addressId,
      paymentMethod,
      couponCode: document.getElementById('couponCodeInput').value
    };

    fetch('/place-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          if (paymentMethod === 'razorpay' && data.razorpayOrderId) {
            const options = {
              key: data.key,
              amount: data.amount,
              currency: 'INR',
              order_id: data.razorpayOrderId,
              handler: function(response) {
                fetch('/verify-payment', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                      razorpay_payment_id: response.razorpay_payment_id,
                      razorpay_order_id: response.razorpay_order_id,
                      razorpay_signature: response.razorpay_signature,
                      orderId: data.orderId
                    })
                  })
                  .then(verifyResponse => verifyResponse.json())
                  .then(verifyData => {
                    if (verifyData.success) {
                      showSuccess('Payment Successful!', 'Your order has been placed.')
                        .then(() => {
                          const orderQuery = new URLSearchParams(verifyData.order).toString();
                          window.location.href = `/orderPlaced?${orderQuery}`;
                        });
                    } else if (verifyData.redirect) {
                      window.location.href = verifyData.redirect;
                    } else {
                      showError('Payment verification failed. Please contact support.');
                      if (callback) callback();
                    }
                  })
                  .catch(error => {
                    showError(`Payment verification error: ${error.message}`);
                    if (callback) callback();
                  });
              },
              prefill: {
                name: '<%= user.name %>',
                email: '<%= user.email %>',
                contact: '<%= addresses[0]?.phone || "" %>'
              },
              theme: {
                color: '#DB4437'
              },
              modal: {
                ondismiss: function() {
                  if (callback) callback();
                }
              }
            };
            const rzp = new Razorpay(options);
            rzp.on('payment.failed', function(response) {
              window.location.href = `/orderFailure?message=${encodeURIComponent(response.error.description)}&orderId=${data.orderId}&totalAmount=${data.amount / 100}`;
              if (callback) callback();
            });
            rzp.open();
          } else {
            showSuccess('Order Placed Successfully!', 'Your order has been placed.')
              .then(() => {
                const orderQuery = new URLSearchParams(data.order).toString();
                window.location.href = `/orderPlaced?${orderQuery}`;
              });
            if (callback) callback();
          }
        } else if (data.redirect) {
          window.location.href = data.redirect;
          if (callback) callback();
        } else {
          showError(data.error || 'Failed to place order');
          if (callback) callback();
        }
      })
      .catch(error => {
        showError(`An error occurred: ${error.message}`);
        if (callback) callback();
      });
  }

  function showSuccess(title, text) {
    return Swal.fire({
      icon: 'success',
      title: title,
      text: text,
      timer: 2000,
      showConfirmButton: false
    });
  }

  function showError(message) {
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: message,
    });
  }
</script>
  <%- include('../../views/partials/user/footer') %>
</body>

</html>