<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #f3f3f3 0%, #ffffff 100%);
    padding: 20px;
}

.container {
    background: white;
    padding: 2.5rem;
    border-radius: 16px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 500px;
    backdrop-filter: blur(10px);
    border: 1px solid #e0e0e0;
}

h2 {
    color: #333;
    text-align: center;
    margin-bottom: 1.5rem;
    font-size: 1.8rem;
    font-weight: 600;
    background: linear-gradient(135deg, #FF4B2B 0%, #FF416C 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    position: relative;
}

h2::after {
    content: '';
    display: block;
    width: 50px;
    height: 3px;
    background: #FF4B2B;
    margin: 0.5rem auto;
    border-radius: 2px;
}

label {
    display: block;
    margin-bottom: 0.6rem;
    color: #555;
    font-weight: 500;
    font-size: 0.95rem;
}

.otp-container {
    display: flex;
    gap: 10px;
    margin-bottom: 1.5rem;
    justify-content: center;
}

.otp-input {
    width: 45px;
    height: 45px;
    border: 2px solid #ccc;
    border-radius: 10px;
    text-align: center;
    font-size: 1.2rem;
    font-weight: 600;
    transition: all 0.3s;
    background: white;
    color: #333;
}

.otp-input:focus {
    border-color: #FF4B2B;
    box-shadow: 0 0 0 3px rgba(255, 75, 43, 0.2);
    outline: none;
}

.password-group {
    position: relative;
    margin-bottom: 0.5rem;
}

.password-input {
    width: 100%;
    padding: 0.9rem;
    padding-right: 45px;
    border: 2px solid #ccc;
    border-radius: 10px;
    font-size: 1rem;
    transition: all 0.3s;
    background: white;
    color: #333;
}

.password-input:focus {
    border-color: #FF416C;
    box-shadow: 0 0 0 3px rgba(255, 65, 108, 0.2);
    outline: none;
}

.toggle-password {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #888;
    font-size: 1rem;
    transition: all 0.3s;
}

.toggle-password:hover {
    color: #FF416C;
}

.validation-box {
    background: #f9f9f9;
    padding: 1rem;
    border-radius: 10px;
    margin-top: 1rem;
    border: 1px solid #e0e0e0;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.validation-item {
    display: flex;
    align-items: center;
    margin: 0.5rem 0;
    font-size: 0.9rem;
    color: #555;
}

.validation-icon {
    margin-right: 0.6rem;
    font-size: 1rem;
}

.valid-icon {
    color: #48bb78;
}

.invalid-icon {
    color: #f56565;
}

button {
    width: 100%;
    padding: 0.9rem;
    background: linear-gradient(135deg, #FF4B2B 0%, #FF416C 100%);
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 1.1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s;
    margin-top: 1rem;
    box-shadow: 0 3px 5px rgba(255, 75, 43, 0.3);
}

button:hover {
    background: #DB4437;
    box-shadow: 0 6px 12px rgba(255, 65, 108, 0.3);
    transform: translateY(-2px);
}

button:active {
    transform: translateY(0);
}

#message {
    text-align: center;
    margin-top: 1rem;
    padding: 0.7rem;
    border-radius: 8px;
    font-size: 0.9rem;
}

.error-message {
    background: #fff5f5;
    color: #DB4437;
    border: 1px solid #feb2b2;
}

.success-message {
    background: #f0fff4;
    color: #2f855a;
    border: 1px solid #9ae6b4;
}

/* Animation for validation icons */
.validation-icon {
    transition: all 0.3s;
}

.validation-icon.fa-check {
    animation: checkmark 0.3s ease-in-out;
}

@keyframes checkmark {
    0% { transform: scale(0); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
}

    </style>
</head>
<!-- Rest of the HTML remains the same -->
<body>
    <div class="container">
        <h2>Reset Password</h2>
        <form id="resetPasswordForm">
            
            <div class="form-group">
                <label>Enter OTP Code</label>
                <div class="otp-container">
                    <input type="text" class="otp-input" maxlength="1" data-index="1">
                    <input type="text" class="otp-input" maxlength="1" data-index="2">
                    <input type="text" class="otp-input" maxlength="1" data-index="3">
                    <input type="text" class="otp-input" maxlength="1" data-index="4">
                    <input type="text" class="otp-input" maxlength="1" data-index="5">
                    <input type="text" class="otp-input" maxlength="1" data-index="6">
                </div>
            </div>

            <div class="form-group">
                <label for="newPassword">New Password</label>
                <div class="password-group">
                    <input type="password" id="newPassword" class="password-input" required>
                    <i class="toggle-password fas fa-eye" data-target="newPassword"></i>
                </div>
                <div class="validation-box">
                    <div class="validation-item" data-requirement="length">
                        <i class="validation-icon fas fa-times"></i>
                        At least 8 characters
                    </div>
                    <div class="validation-item" data-requirement="uppercase">
                        <i class="validation-icon fas fa-times"></i>
                        One uppercase letter
                    </div>
                    <div class="validation-item" data-requirement="lowercase">
                        <i class="validation-icon fas fa-times"></i>
                        One lowercase letter
                    </div>
                    <div class="validation-item" data-requirement="number">
                        <i class="validation-icon fas fa-times"></i>
                        One number
                    </div>
                    <div class="validation-item" data-requirement="special">
                        <i class="validation-icon fas fa-times"></i>
                        One special character
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <div class="password-group">
                    <input type="password" id="confirmPassword" class="password-input" required>
                    <i class="toggle-password fas fa-eye" data-target="confirmPassword"></i>
                </div>
                <div class="validation-box">
                    <div class="validation-item" data-requirement="match">
                        <i class="validation-icon fas fa-times"></i>
                        Passwords match
                    </div>
                </div>
            </div>

            <button type="submit" id="submitBtn">Reset Password</button>
            <div id="message"></div>
        </form>
    </div>
<!-- SweetAlert2 CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
    // Previous OTP handling code remains the same

    // Password visibility toggle
    document.querySelectorAll('.toggle-password').forEach(icon => {
        icon.addEventListener('click', () => {
            const targetId = icon.getAttribute('data-target');
            const input = document.getElementById(targetId);
            
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });
    });

    // Password validation
    const newPassword = document.getElementById('newPassword');
    const confirmPassword = document.getElementById('confirmPassword');
    
    function validatePassword() {
        const password = newPassword.value;
        const validations = {
            length: password.length >= 8,
            uppercase: /[A-Z]/.test(password),
            lowercase: /[a-z]/.test(password),
            number: /[0-9]/.test(password),
            special: /[^A-Za-z0-9]/.test(password),
            match: password === confirmPassword.value && password !== ''
        };

        Object.entries(validations).forEach(([requirement, isValid]) => {
            const item = document.querySelector(`[data-requirement="${requirement}"] .validation-icon`);
            if (item) {
                item.className = `validation-icon fas ${isValid ? 'fa-check valid-icon': 'fa-times invalid-icon'}`;
            }
        });

        return Object.values(validations).every(v => v);
    }

    newPassword.addEventListener('input', validatePassword);
    confirmPassword.addEventListener('input', validatePassword);

    // Form submission
    const form = document.getElementById('resetPasswordForm');
    
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!validatePassword()) {
            showMessage('Please meet all password requirements', 'error');
            return;
        }
        
        const newPasswords = document.getElementById("confirmPassword").value;
        try {
            const response = await fetch('/newPassword', {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ password: newPasswords })
            });
            
            if (!response.ok) {
                throw new Error("Server error, please try again.");
            }

            const data = await response.json();
            if (data.success) {
                Swal.fire({
                    title: "Success!",
                    text: "Password reset successfully!",
                    icon: "success"
                }).then(() => window.location.href = "/login");
            } else {
                showMessage(data.message, 'error');
            }
        } catch (error) {
            showMessage(error.message || "Network error, please try again.", 'error');
        }
    });

    // Previous helper functions (showMessage, setLoading) remain the same
});
    </script>
</body>
</html>