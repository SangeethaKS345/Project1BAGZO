<%- include("../../views/partials/user/header") %>
<link rel="stylesheet" href="/css/userCart.css" type="text/css">
<div class="cart-container">
    <div class="cart-header">
        <div class="container">
            <h1>Shopping Cart</h1>
            <div class="breadcrumb">
                <a href="/">Home</a> > <a href="/shop">Shop</a> > <span>Cart</span>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="cart-content">
            <div class="cart-items">
                <% if (Array.isArray(cartData) && cartData.length > 0) { %>
                    <% for (let i = 0; i < cartData.length; i++) { %>
                        <div class="cart-item">
                            <div class="cart-item__image">
                                <a href="/productDetails?id=<%= cartData[i].productDetails[0]._id %>">
                                    <img src="/uploads/re-image/<%= (cartData[i].productDetails[0].productImage && cartData[i].productDetails[0].productImage.length > 0) ? cartData[i].productDetails[0].productImage[0] : 'default.jpg' %>" alt="<%= cartData[i].productDetails[0].productName %>">
                                </a>
                            </div>
                            <div>
                                <h3 class="cart-item__title">
                                    <a href="/productDetails?id=<%= cartData[i].productDetails[0]._id %>">
                                        <%= cartData[i].productDetails[0].productName %>
                                        <% if (cartData[i].productDetails[0].isOnSale) { %>
                                            <span class="product-badge">Sale</span>
                                        <% } %>
                                    </a>
                                </h3>
                                <p class="cart-item__quantity"><%= cartData[i].categoryDetails[0].name %> | <%= cartData[i].brandDetails[0].brandName %></p>
                                <% 
                                    const regularPrice = cartData[i].productDetails[0].regularPrice || 0;
                                    const productOffer = cartData[i].productDetails[0].productOffer || 0;
                                    const categoryOffer = cartData[i].categoryDetails[0].categoryOffer || 0;
                                    const salesPrice = cartData[i].productDetails[0].salesPrice || regularPrice;
                                    
                                    // Calculate discount based on requirements
                                    let discount = 0;
                                    let finalPrice = regularPrice;

                                    // If there are any offers
                                    if (productOffer > 0 || categoryOffer > 0) {
                                        const productDiscount = regularPrice * (productOffer / 100);
                                        const categoryDiscount = regularPrice * (categoryOffer / 100);
                                        discount = Math.max(productDiscount, categoryDiscount);
                                        finalPrice = regularPrice - discount;
                                    } 
                                    // If no offers, use sales price
                                    else if (salesPrice !== regularPrice) {
                                        discount = regularPrice - salesPrice;
                                        finalPrice = salesPrice;
                                    }
                                    // If discount and sales price are same, discount = 0
                                    if (discount === (regularPrice - salesPrice) && productOffer === 0 && categoryOffer === 0) {
                                        discount = 0;
                                    }
                                %>
                                <p class="cart-item__price">Regular: ₹<%= regularPrice.toFixed(2) %></p>
                                <% if (discount > 0) { %>
                                    <p class="cart-item__price" style="color: var(--accent-color);">Price: ₹<%= finalPrice.toFixed(2) %></p>
                                    <p class="cart-item__quantity">Discount: ₹<%= discount.toFixed(2) %></p>
                                <% } %>
                                <div class="quantity-wrapper">
                                    <button class="qty-btn minus" onclick="changeQuantity('<%= cartData[i].productDetails[0]._id %>', '<%= cartData[i].products.quantity %>', -1, '<%= finalPrice %>', '<%= cartData[i].productDetails[0]._id %>', <%= cartData[i].productDetails[0].maxQuantity %>)">-</button>
                                    <input type="text" id="cartProductQuantity<%= cartData[i].productDetails[0]._id %>" value="<%= cartData[i].products.quantity %>" readonly>
                                    <button class="qty-btn plus" onclick="changeQuantity('<%= cartData[i].productDetails[0]._id %>', '<%= cartData[i].products.quantity %>', 1, '<%= finalPrice %>', '<%= cartData[i].productDetails[0]._id %>', <%= cartData[i].productDetails[0].maxQuantity %>)">+</button>
                                </div>
                            </div>
                            <div class="cart-item__total">
                                ₹<span id="subTotal<%= cartData[i].productDetails[0]._id %>"><%= (finalPrice * cartData[i].products.quantity).toFixed(2) %></span>
                                <button class="remove-btn" onclick="confirmRemove('<%= cartData[i].productDetails[0]._id %>')">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                                        <path fill="none" d="M0 0h24v24H0z"/>
                                        <path d="M17 6h5v2h-2v13a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V8H2V6h5V3a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v3zm1 2H6v12h12V8zm-9 3h2v6H9v-6zm4 0h2v6h-2v-6zM9 4v2h6V4H9z"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    <% } %>
                <% } else { %>
                    <div class="empty-cart">
                        <div class="empty-cart-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="64" height="64">
                                <path fill="none" d="M0 0h24v24H0z"/>
                                <path d="M4 16V4H2V2h3a1 1 0 0 1 1 1v12h12.438l2-8H8V5h13.72a1 1 0 0 1 .97 1.243l-2.5 10a1 1 0 0 1-.97.757H5a1 1 0 0 1-1-1zm2 7a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm12 0a2 2 0 1 1 0-4 2 2 0 0 1 0 4z"/>
                            </svg>
                        </div>
                        <h2>Your Cart is Empty</h2>
                        <p>Looks like you haven't added any products to your cart yet.</p>
                        <a href="/shop" class="shop-now-btn btn">Shop Now</a>
                    </div>
                <% } %>
            </div>

            <!-- Order Summary Section -->
            <div class="order-summary summary-card">
                <h2 class="section__title">Order Summary</h2>
                <div class="summary-items">
                    <div class="summary-row">
                        <span>Subtotal</span>
                        <span>₹<span id="subtotal">
                            <% 
                            let subtotal = 0;
                            let totalDiscount = 0;
                            if (Array.isArray(cartData) && cartData.length > 0) {
                                cartData.forEach(item => {
                                    const regularPrice = item.productDetails[0].regularPrice || 0;
                                    const productOffer = item.productDetails[0].productOffer || 0;
                                    const categoryOffer = item.categoryDetails[0].categoryOffer || 0;
                                    const salesPrice = item.productDetails[0].salesPrice || regularPrice;
                                    
                                    let discount = 0;
                                    let finalPrice = regularPrice;

                                    if (productOffer > 0 || categoryOffer > 0) {
                                        const productDiscount = regularPrice * (productOffer / 100);
                                        const categoryDiscount = regularPrice * (categoryOffer / 100);
                                        discount = Math.max(productDiscount, categoryDiscount);
                                        finalPrice = regularPrice - discount;
                                    } else if (salesPrice !== regularPrice) {
                                        discount = regularPrice - salesPrice;
                                        finalPrice = salesPrice;
                                    }
                                    if (discount === (regularPrice - salesPrice) && productOffer === 0 && categoryOffer === 0) {
                                        discount = 0;
                                    }
                                    
                                    subtotal += finalPrice * item.products.quantity;
                                    totalDiscount += discount * item.products.quantity;
                                });
                            }
                            %>
                            <%= subtotal.toFixed(2) %>
                        </span></span>
                    </div>
                    <div class="summary-row">
                        <span>Shipping</span>
                        <span class="free-shipping">FREE</span>
                    </div>
                    <div class="summary-row">
                        <span>Discount</span>
                        <span>₹<%= totalDiscount.toFixed(2) %></span>
                    </div>
                </div>
                <div class="summary-row total">
                    <span>Total</span>
                    <span>₹<span id="total"><%= subtotal.toFixed(2) %></span></span>
                </div>
                <% if (Array.isArray(cartData) && cartData.length > 0) { %>
                    <a href="/checkout?userId=<%= user._id %>" class="btn checkout-btn">Proceed to Checkout</a>
                <% } else { %>
                    <button disabled class="btn checkout-btn disabled">Proceed to Checkout</button>
                <% } %>
                <a href="/shop" class="continue-shopping">
                    <span>Continue Shopping</span>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16">
                        <path fill="none" d="M0 0h24v24H0z"/>
                        <path d="M13.172 12l-4.95-4.95 1.414-1.414L16 12l-6.364 6.364-1.414-1.414z"/>
                    </svg>
                </a>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
   function changeQuantity(productId, currentQuantity, change, price, elementId, maxQuantity) {
    const quantityInput = document.getElementById(`cartProductQuantity${elementId}`);
    const currentVal = parseInt(quantityInput.value);
    const newQuantity = currentVal + change;

    if (newQuantity > 5) {
        Swal.fire({
            icon: 'warning',
            title: 'Quantity Limit',
            text: 'You cannot add more than 5 items of this product to your cart.',
        });
        return;
    }

    let maxLimitText = maxQuantity >= 5 ? '5' : maxQuantity;
    if (newQuantity < 1 || newQuantity > maxQuantity) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Quantity',
            text: `Quantity must be between 1 and ${maxLimitText}. Only ${maxQuantity} items available.`,
        });
        return;
    }

    const minusBtn = document.querySelector(`.minus[onclick*="${productId}"]`);
    const plusBtn = document.querySelector(`.plus[onclick*="${productId}"]`);
    minusBtn.disabled = true;
    plusBtn.disabled = true;

    $.ajax({
        url: '/cart/changeQuantity',
        method: 'POST',
        data: {
            productId: productId,
            quantity: newQuantity
        },
        success: function(response) {
            if (response.status) {
                const quantityInput = document.getElementById(`cartProductQuantity${elementId}`);
                const subTotalSpan = document.getElementById(`subTotal${elementId}`);
                const totalSpan = document.getElementById('total');
                const subtotalSpan = document.getElementById('subtotal');

                quantityInput.value = response.quantityInput;
                subTotalSpan.innerText = (price * response.quantityInput).toFixed(2);
                totalSpan.innerText = response.grandTotal;
                subtotalSpan.innerText = response.grandTotal;

                subTotalSpan.classList.add('price-updated');
                setTimeout(() => subTotalSpan.classList.remove('price-updated'), 800);
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: response.error || 'Failed to update quantity'
                });
            }
        },
        error: function() {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to connect to server'
            });
        },
        complete: function() {
            minusBtn.disabled = false;
            plusBtn.disabled = false;
        }
    });
}
    
    function confirmRemove(productId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to remove this item from the cart?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, remove it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: `/cart/delete?id=${productId}`,
                    method: 'DELETE',
                    success: function(response) {
                        if (response.status) {
                            location.reload();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Failed to remove item from the cart'
                            });
                        }
                    },
                    error: function() {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to connect to server'
                        });
                    }
                });
            }
        });
    }
    
    function checkCartQuantities() {
        console.log('Checking cart quantities...');
        const quantityInputs = document.querySelectorAll('input[id^="cartProductQuantity"]');
        let exceedsLimit = false;
        let excessProducts = [];
    
        quantityInputs.forEach(input => {
            const quantity = parseInt(input.value);
            console.log(`Input ID: ${input.id}, Quantity: ${quantity}`);
            if (quantity > 5) {
                exceedsLimit = true;
                excessProducts.push(input.id.replace('cartProductQuantity', ''));
            }
        });
    
        console.log('Exceeds limit:', exceedsLimit, 'Excess products:', excessProducts);
    
        if (exceedsLimit) {
            Swal.fire({
                icon: 'error',
                title: 'Quantity Limit Exceeded',
                text: `You cannot checkout with more than 5 items per product. Please adjust quantities for item(s): ${excessProducts.join(', ')}.`,
            });
            return false;
        }
        return true;
    }
    
    document.addEventListener('DOMContentLoaded', () => {
        const checkoutButton = document.querySelector('.checkout-btn:not(.disabled)');
        if (checkoutButton) {
            checkoutButton.addEventListener('click', (e) => {
                console.log('Checkout button clicked');
                if (!checkCartQuantities()) {
                    e.preventDefault();
                    console.log('Checkout prevented due to quantity limit');
                } else {
                    console.log('Proceeding to checkout');
                }
            });
        }
    });
</script>

<%- include('../../views/partials/user/footer') %>