<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <!--=============== FLATICON ===============-->
  <link rel="stylesheet" href="https://cdn-uicons.flaticon.com/2.0.0/uicons-regular-straight/css/uicons-regular-straight.css" />
  
  <!--=============== FONT AWESOME ===============-->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <!--=============== RAZORPAY SDK ===============-->
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <!--=============== CSS ===============-->
  <link rel="stylesheet" href="/css/myOrders.css" />
  <title>My Orders | BAGZO</title>

  <%- include('../../views/partials/user/header') %>
 
</head>

<body>
  <!--=============== BREADCRUMB ===============-->
  <section class="breadcrumb">
    <ul class="breadcrumb__list flex container">
      <li><a href="/" class="breadcrumb__link">Home</a></li>
      <li><span class="breadcrumb__link">></span></li>
      <li><a href="/profile" class="breadcrumb__link">Profile</a></li>
      <li><span class="breadcrumb__link">></span></li>
      <li><a href="/my-orders" class="breadcrumb__link">My Orders</a></li>
    </ul>
  </section>
  
  <div class="orders-container">
    <h2 class="section__title">My Orders</h2>
    
    <% if (orders.length === 0) { %>
      <div class="empty-orders">
        <img src="/assets/img/empty-orders.svg" alt="No orders" class="empty-orders-img">
        <h3>No Orders Found</h3>
        <p>You haven't placed any orders yet</p>
        <a href="/shop" class="btn btn-primary">Start Shopping</a>
      </div>
    <% } else { %>
      <% orders.forEach(order => { %>
        <div class="order-card">
          <div class="order-header">
            <div>
              <h3><%= order.product.productName %></h3>
              <p><i class="fas fa-hashtag"></i> Order #<%= order.orderId %></p>
              <p><i class="fas fa-calendar-alt"></i> Placed on: <%= order.placedOn %></p>
              <p><i class="fas fa-box"></i> Total Quantity: <%= order.quantity %></p>
              <p class="total-amount"><i class="fas fa-rupee-sign"></i> â‚¹<%= order.totalAmount %></p>
            </div>
            
            <div>
              <% if (order.status === 0) { %>
                <button class="btn btn-secondary cancel-order-btn" data-order-id="<%= order.orderId %>" disabled>
                  <i class="fas fa-ban"></i> Cancelled
                </button>
              <% } else if (order.cancellation_reason) { %>
                <button class="btn btn-secondary cancel-order-btn" data-order-id="<%= order.orderId %>" disabled>
                  <i class="fas fa-ban"></i> Cancelled
                </button>
              <% } else if (order.paymentStatus === 'failed' || (order.paymentMethod === 'razorpay' && order.status === 1 && order.paymentStatus === 'pending')) { %>
                <button class="btn btn-warning pay-now-btn" data-order-id="<%= order.orderId %>">
                  <i class="fas fa-redo"></i> Pay
                </button>
              <% } else if (order.status === 4 && !order.return_reason) { %>
                <button class="btn btn-warning return-order-btn" data-order-id="<%= order.orderId %>">
                  <i class="fas fa-undo"></i> Return Order
                </button>
              <% } else if (order.status === 5) { %>
                <button class="btn btn-secondary return-order-btn" data-order-id="<%= order.orderId %>" disabled>
                  <i class="fas fa-clock"></i> Return request in process
                </button>
              <% } else if (order.status === 6) { %>
                <button class="btn btn-success return-order-btn" data-order-id="<%= order.orderId %>" disabled>
                  <i class="fas fa-check-circle"></i> Returned
                </button>
              <% } else if (order.status < 4) { %>
                <button class="btn btn-danger cancel-order-btn" data-order-id="<%= order.orderId %>">
                  <i class="fas fa-times-circle"></i> Cancel Order
                </button>
              <% } %>
            </div>
          </div>
          <div class="order-details">
            <img src="/uploads/re-image/<%= order.product.productImage[0] || 'default.jpg' %>" alt="<%= order.product.productName %>" class="product-image">
            <div class="product-info">
              <div class="status-tracker">
                <div class="status-line <%= order.status >= 2 ? 'active' : '' %>"></div>
                <% if (order.paymentStatus === 'failed' || (order.paymentMethod === 'razorpay' && order.status === 1 && order.paymentStatus === 'pending')) { %>
                  <div class="status-step active">
                    <div class="status-dot active"></div>
                    <span>Failed</span>
                  </div>
                <% } else { %>
                  <div class="status-step <%= order.status >= 1 ? 'active' : '' %>">
                    <div class="status-dot <%= order.status >= 1 ? 'active' : '' %>"></div>
                    <span>Order Placed</span>
                  </div>
                  <div class="status-step <%= order.status >= 2 ? 'active' : '' %>">
                    <div class="status-dot <%= order.status >= 2 ? 'active' : '' %>"></div>
                    <span>Processing</span>
                  </div>
                  <div class="status-step <%= order.status >= 3 ? 'active' : '' %>">
                    <div class="status-dot <%= order.status >= 3 ? 'active' : '' %>"></div>
                    <span>Shipped</span>
                  </div>
                  <div class="status-step <%= order.status >= 4 ? 'active' : '' %>">
                    <div class="status-dot <%= order.status >= 4 ? 'active' : '' %>"></div>
                    <span>Delivered</span>
                  </div>
                <% } %>
              </div>
            </div>
          </div>

          <div class="action-buttons">
            <button class="btn btn-primary buy-again-btn" data-product-id="<%= order.product._id %>">
              <i class="fas fa-shopping-cart"></i> Buy Again
            </button>
            <button class="btn btn-primary download-invoice-btn" data-order-id="<%= order.orderId %>">
              <i class="fas fa-file-download"></i> Download Invoice
            </button>
            <button class="btn btn-info view-details-btn" data-order-id="<%= order.orderId %>">
              <i class="fas fa-eye"></i> View Details
            </button>
          </div>
        </div>
      <% }) %>

      <!-- Pagination -->
      <div class="pagination">
        <% if (currentPage > 1) { %>
          <a href="/my-orders?page=<%= currentPage - 1 %>" class="pagination-btn">
            <i class="fas fa-chevron-left"></i> Previous
          </a>
        <% } %>
        
        <% for(let i = 1; i <= totalPages; i++) { %>
          <a href="/my-orders?page=<%= i %>" class="pagination-btn <%= currentPage === i ? 'active' : '' %>"><%= i %></a>
        <% } %>
        
        <% if (currentPage < totalPages) { %>
          <a href="/my-orders?page=<%= currentPage + 1 %>" class="pagination-btn">
            Next <i class="fas fa-chevron-right"></i>
          </a>
        <% } %>
      </div>
    <% } %>
  </div>

  <!-- Cancel Order Modal -->
  <div id="cancelOrderModal" class="modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1000; width: 400px; max-width: 90%; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
    <h3>Cancel Order</h3>
    <p>Please provide a reason for cancellation</p>
    <textarea id="cancellationReason" placeholder="Enter your reason here..."></textarea>
    <div style="text-align: right;">
      <button id="closeModal">
        <i class="fas fa-times"></i> Close
      </button>
      <button id="confirmCancel">
        <i class="fas fa-check"></i> Confirm
      </button>
    </div>
  </div>

  <!-- Return Order Modal -->
  <div id="returnOrderModal" class="modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1000; width: 400px; max-width: 90%; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
    <h3>Return Order</h3>
    <p>Please provide a reason for return</p>
    <textarea id="returnReason" placeholder="Enter your reason here..."></textarea>
    <div style="text-align: right;">
      <button id="closeReturnModal">
        <i class="fas fa-times"></i> Close
      </button>
      <button id="confirmReturn">
        <i class="fas fa-check"></i> Confirm
      </button>
    </div>
  </div>

  <!-- Order Details Modal -->
  <div id="orderDetailsModal" class="modal" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1000; width: 700px; max-width: 90%; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); max-height: 80vh; overflow-y: auto;">
    <div class="modal-content">
      <h3>Order Details</h3>
      <div class="order-info-section">
        <h4>Order Information</h4>
        <p><strong>Order ID:</strong> <span id="modal-order-id"></span></p>
        <p><strong>Order Date:</strong> <span id="modal-order-date"></span></p>
        <p><strong>Payment Method:</strong> <span id="modal-payment-method"></span></p>
        <p><strong>Total Amount:</strong> <span id="modal-total-amount"></span></p>
      </div>
      <div class="customer-info-section">
        <h4>Customer Information</h4>
        <p><strong>Name:</strong> <span id="modal-customer-name"></span></p>
        <p><strong>Email:</strong> <span id="modal-customer-email"></span></p>
      </div>
      <div class="shipping-info-section">
        <h4>Shipping Address</h4>
        <p><strong>Name:</strong> <span id="modal-shipping-name"></span></p>
        <p><strong>House No:</strong> <span id="modal-shipping-house-no"></span></p>
        <p><strong>Landmark:</strong> <span id="modal-shipping-landmark"></span></p>
        <p><strong>City:</strong> <span id="modal-shipping-city"></span></p>
        <p><strong>State:</strong> <span id="modal-shipping-state"></span></p>
        <p><strong>Pincode:</strong> <span id="modal-shipping-pincode"></span></p>
        <p><strong>Phone:</strong> <span id="modal-shipping-phone"></span></p>
        <p><strong>Alternate Phone:</strong> <span id="modal-shipping-alt-phone"></span></p> <!-- New field -->
      </div>
      <div class="order-items-section">
        <h4>Order Items</h4>
        <table id="modal-order-items">
          <thead>
            <tr>
              <th>Product</th>
              <th>Price</th>
              <th>Quantity</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
      <div style="text-align: right; margin-top: 20px;">
        <button id="repayButton" style="display: none;" class="btn btn-warning">
          <i class="fas fa-redo"></i> Repay with Razorpay
        </button>
        <button id="closeOrderModal">
          <i class="fas fa-times"></i> Close
        </button>
      </div>
    </div>
  </div>

  <!-- Overlay -->
  <div id="modalOverlay" style="display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0,0,0,0.5); z-index: 999;"></div>
</body>

<%- include('../../views/partials/user/footer') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Inject user data from server to client -->
<script>
  const userData = {
    name: <%- JSON.stringify(user?.name || 'Customer') %>,
    email: <%- JSON.stringify(user?.email || '') %>,
    phone: <%- JSON.stringify(user?.phone || '') %>
  };
</script>

<!-- Main script with all handlers -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
// Modal overlay
const modalOverlay = document.getElementById('modalOverlay');

// Cancel Order Handler
document.querySelectorAll('.cancel-order-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    const orderId = e.target.closest('.cancel-order-btn').getAttribute('data-order-id');
    
    const modal = document.getElementById('cancelOrderModal');
    modal.style.display = 'block';
    modalOverlay.style.display = 'block';

    const closeModal = () => {
      modal.style.display = 'none';
      modalOverlay.style.display = 'none';
    };

    document.getElementById('closeModal').onclick = closeModal;
    modalOverlay.onclick = closeModal;

    document.getElementById('confirmCancel').onclick = async () => {
      const cancellationReason = document.getElementById('cancellationReason').value.trim();
      
      if (!cancellationReason) {
        Swal.fire('Error', 'Please provide a reason for cancellation.', 'error');
        return;
      }

      try {
        const response = await fetch(`/cancel-order/${orderId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ cancellationReason })
        });
        
        const data = await response.json();
        
        if (data.success) {
          Swal.fire({
            title: 'Order Cancelled',
            text: 'Your order has been successfully cancelled.',
            icon: 'success',
            confirmButtonColor: '#FF4B2B'
          });
          
          const buttonToUpdate = document.querySelector(`.cancel-order-btn[data-order-id="${orderId}"]`);
          if (buttonToUpdate) {
            buttonToUpdate.innerHTML = '<i class="fas fa-ban"></i> Cancelled';
            buttonToUpdate.disabled = true;
            buttonToUpdate.classList.remove('btn-danger');
            buttonToUpdate.classList.add('btn-secondary');
          }
          
          closeModal();
        } else {
          Swal.fire('Error', data.message || 'Failed to cancel order', 'error');
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'Something went wrong', 'error');
      }
    };
  });
});

// Return Order Handling
document.querySelectorAll('.return-order-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    const orderId = e.target.closest('.return-order-btn').getAttribute('data-order-id');
    
    const modal = document.getElementById('returnOrderModal');
    modal.style.display = 'block';
    modalOverlay.style.display = 'block';

    const closeModal = () => {
      modal.style.display = 'none';
      modalOverlay.style.display = 'none';
    };

    document.getElementById('closeReturnModal').onclick = closeModal;
    modalOverlay.onclick = closeModal;

    document.getElementById('confirmReturn').onclick = async () => {
      const returnReason = document.getElementById('returnReason').value.trim();
      
      if (!returnReason) {
        Swal.fire('Error', 'Please provide a reason for return.', 'error');
        return;
      }

      try {
        const response = await fetch(`/return-order/${orderId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ returnReason })
        });
        
        const data = await response.json();
        
        if (data.success) {
          Swal.fire({
            title: 'Return Requested',
            text: 'Your return request has been successfully submitted.',
            icon: 'success',
            confirmButtonColor: '#FF4B2B'
          });
          
          button.innerHTML = '<i class="fas fa-clock"></i> Return Request In Process';
          button.disabled = true;
          button.classList.replace('btn-warning', 'btn-secondary');
          
          closeModal();
        } else {
          Swal.fire('Error', data.message || 'Failed to process return request', 'error');
        }
      } catch (error) {
        console.error('Return Order Error:', error);
        Swal.fire('Error', 'Something went wrong', 'error');
      }
    };
  });
});

// Buy Again Handler
document.querySelectorAll('.buy-again-btn').forEach(button => {
  button.addEventListener('click', (e) => {
    const productId = e.target.closest('.buy-again-btn').getAttribute('data-product-id');
    if (productId) {
      window.location.href = `/productDetails?id=${productId}`;
    } else {
      Swal.fire({
        title: 'Error',
        text: 'Product ID not found',
        icon: 'error',
        confirmButtonColor: '#FF4B2B'
      });
    }
  });
});

// Download Invoice Handler
document.querySelectorAll('.download-invoice-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    const orderId = e.target.closest('.download-invoice-btn').getAttribute('data-order-id');
    
    try {
      const response = await fetch(`/download-invoice/${orderId}`, {
        method: 'GET',
        headers: { 'Accept': 'application/pdf' }
      });

      if (!response.ok) {
        throw new Error('Failed to download invoice');
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `invoice_${orderId}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error downloading invoice:', error);
      Swal.fire({
        title: 'Error',
        text: 'Failed to download invoice. Please try again.',
        icon: 'error',
        confirmButtonColor: '#FF4B2B'
      });
    }
  });
});

// View Details Handler (modal)
document.querySelectorAll('.view-details-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    const orderId = e.target.closest('.view-details-btn').getAttribute('data-order-id');
    const modal = document.getElementById('orderDetailsModal');
    const overlay = document.getElementById('modalOverlay');
    const repayButton = document.getElementById('repayButton');

    modal.style.display = 'block';
    overlay.style.display = 'block';

    try {
      const response = await fetch(`/order-details/${orderId}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      const data = await response.json();

      if (data.success) {
        const order = data.order;

        // Populate modal fields (unchanged)
        document.getElementById('modal-order-id').textContent = order.orderId || 'N/A';
        document.getElementById('modal-order-date').textContent = order.orderDate ? new Date(order.orderDate).toLocaleString() : 'N/A';
        document.getElementById('modal-payment-method').textContent = order.paymentMethod || 'N/A';
        document.getElementById('modal-total-amount').textContent = order.finalAmount ? `â‚¹${order.finalAmount}` : 'N/A';
        document.getElementById('modal-customer-name').textContent = order.userName || 'N/A';
        document.getElementById('modal-customer-email').textContent = order.userEmail || 'N/A';
        document.getElementById('modal-shipping-name').textContent = order.shippingAddress?.name || 'N/A';
        document.getElementById('modal-shipping-house-no').textContent = order.shippingAddress?.houseNo || 'N/A';
        document.getElementById('modal-shipping-landmark').textContent = order.shippingAddress?.landMark || 'N/A';
        document.getElementById('modal-shipping-city').textContent = order.shippingAddress?.city || 'N/A';
        document.getElementById('modal-shipping-state').textContent = order.shippingAddress?.state || 'N/A';
        document.getElementById('modal-shipping-pincode').textContent = order.shippingAddress?.pincode || 'N/A';
        document.getElementById('modal-shipping-phone').textContent = order.shippingAddress?.phone || 'N/A';
        document.getElementById('modal-shipping-alt-phone').textContent = order.shippingAddress?.altPhone || 'N/A';

        const itemsTable = document.getElementById('modal-order-items').getElementsByTagName('tbody')[0];
        itemsTable.innerHTML = '';
        let items = order.orderedItems || [];
        if (items.length > 0) {
          items.forEach((item) => {
            const productName = item.product?.productName || 'N/A';
            const price = item.price || 0;
            const quantity = item.quantity || 0;
            const total = item.total || (price * quantity) || 0;
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${productName}</td>
              <td>â‚¹${price}</td>
              <td>${quantity}</td>
              <td>â‚¹${total}</td>
            `;
            itemsTable.appendChild(row);
          });
        } else {
          const row = document.createElement('tr');
          row.innerHTML = `<td colspan="4">No item details available</td>`;
          itemsTable.appendChild(row);
        }

        // Handle repayment button
        if (order.paymentStatus === 'failed' && order.paymentMethod === 'razorpay') {
          repayButton.style.display = 'inline-block';
          repayButton.onclick = async () => {
            try {
              const response = await fetch(`/retry-payment/${order.orderId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
              });

              if (!response.ok) {
                throw new Error('Failed to initiate payment retry');
              }

              const data = await response.json();
              if (data.success) {
                const options = {
                  key: data.key,
                  amount: data.amount,
                  currency: 'INR',
                  name: 'BAGZO',
                  description: `Retry Payment for Order #${order.orderId}`,
                  order_id: data.razorpayOrderId,
                  handler: async function (response) {
                    const verifyResponse = await fetch('/verify-payment', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        orderId: data.orderId,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature
                      })
                    });
                    const verifyData = await verifyResponse.json();
                    if (verifyData.success) {
                      Swal.fire('Success', 'Payment completed successfully!', 'success')
                        .then(() => window.location.reload());
                    } else {
                      Swal.fire('Error', verifyData.error || 'Payment verification failed', 'error');
                    }
                  },
                  prefill: {
                    name: userData.name,
                    email: userData.email,
                    contact: userData.phone
                  },
                  theme: {
                    color: '#FF4B2B'
                  },
                  modal: {
                    ondismiss: async function () {
                      await fetch('/payment-failed', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ orderId: data.orderId })
                      });
                    }
                  }
                };
                const rzp = new Razorpay(options);
                rzp.open();
              } else {
                Swal.fire('Error', data.error || 'Failed to initiate payment retry', 'error');
              }
            } catch (error) {
              console.error('Repayment error:', error);
              Swal.fire('Error', 'Something went wrong during repayment', 'error');
            }
          };
        } else {
          repayButton.style.display = 'none';
        }
      } else {
        Swal.fire('Error', data.message || 'Failed to load order details', 'error');
      }
    } catch (error) {
      console.error('Error fetching order details:', error);
      Swal.fire('Error', 'Something went wrong', 'error');
    }

    document.getElementById('closeOrderModal').onclick = () => {
      modal.style.display = 'none';
      overlay.style.display = 'none';
    };
    overlay.onclick = () => {
      modal.style.display = 'none';
      overlay.style.display = 'none';
    };
  });
});



// Razorpay Payment Function
function initiateRazorpayPayment(orderId, amount) {
  const options = {
    key: 'YOUR_RAZORPAY_KEY', // Replace with your Razorpay key
    amount: amount * 100,
    currency: 'INR',
    name: 'BAGZO',
    description: `Payment for Order #${orderId}`,
    order_id: orderId,
    handler: async function (response) {
      try {
        const verifyResponse = await fetch('/verify-payment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            orderId,
            razorpay_payment_id: response.razorpay_payment_id,
            razorpay_order_id: response.razorpay_order_id,
            razorpay_signature: response.razorpay_signature
          })
        });
        const verifyData = await verifyResponse.json();
        if (verifyData.success) {
          Swal.fire('Success', 'Payment completed successfully!', 'success');
          window.location.reload();
        } else {
          Swal.fire('Error', 'Payment verification failed', 'error');
        }
      } catch (error) {
        Swal.fire('Error', 'Payment processing failed', 'error');
      }
    },
    prefill: {
      name: userData.name,
      email: userData.email,
      contact: userData.phone
    },
    theme: {
      color: '#FF4B2B'
    },
    modal: {
      ondismiss: async function () {
        try {
          await fetch('/payment-failed', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId })
          });
          window.location.reload();
        } catch (error) {
          console.error('Error updating payment failure:', error);
        }
      }
    }
  };
  const rzp = new Razorpay(options);
  rzp.on('payment.failed', async function (response) {
    try {
      await fetch('/payment-failed', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId })
      });
      window.location.reload();
    } catch (error) {
      console.error('Error updating payment failure:', error);
    }
  });
  rzp.open();
}

// Pay Now Handler
document.querySelectorAll('.pay-now-btn').forEach(button => {
  button.addEventListener('click', async (e) => {
    const orderId = e.target.closest('.pay-now-btn').getAttribute('data-order-id');
    
    try {
      const response = await fetch(`/retry-payment/${orderId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) {
        const text = await response.text();
        console.error('Retry Payment Error - Non-JSON Response:', text);
        throw new Error(`Server responded with status ${response.status}: ${text}`);
      }

      const data = await response.json();
      
      if (data.success) {
        const options = {
          key: data.key,
          amount: data.amount,
          currency: 'INR',
          name: 'BAGZO',
          description: `Retry Payment for Order #${orderId}`,
          order_id: data.razorpayOrderId,
          handler: async function (response) {
            const verifyResponse = await fetch('/verify-payment', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                orderId: data.orderId,
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_order_id: response.razorpay_order_id,
                razorpay_signature: response.razorpay_signature
              })
            });
            
            const verifyData = await verifyResponse.json();
            if (verifyData.success) {
              Swal.fire('Success', 'Payment completed successfully!', 'success')
                .then(() => window.location.reload());
            } else {
              Swal.fire('Error', verifyData.error || 'Payment verification failed', 'error');
            }
          },
          prefill: {
            name: userData.name,
            email: userData.email,
            contact: userData.phone
          },
          theme: {
            color: '#FF4B2B'
          },
          modal: {
            ondismiss: async function () {
              await fetch('/payment-failed', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId: data.orderId })
              });
            }
          }
        };
        
        const rzp = new Razorpay(options);
        rzp.open();
      } else {
        Swal.fire('Error', data.error || 'Failed to initiate payment retry', 'error');
      }
    } catch (error) {
      console.error('Payment retry error:', error);
      Swal.fire('Error', 'Something went wrong: ' + error.message, 'error');
    }
  });
});
</script>
