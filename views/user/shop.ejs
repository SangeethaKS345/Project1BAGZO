<head>
    <%- include('../../views/partials/user/header') %>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/css/shop.css" type="text/css">
    <style>
      .product-price .offer-percentage {
          color: #e91e63;
          font-size: 12px;
          margin-left: 5px;
      }
      .product-badge {
          position: absolute;
          top: 10px;
          left: 10px;
          background-color: #e91e63;
          color: white;
          padding: 2px 8px;
          border-radius: 3px;
          font-size: 12px;
      }
    </style>
</head>

<body>
    <div class="main-container">
      <section class="shop-page">
        <div class="shop-topbar">
          <form action="" method="GET" class="search-form" id="searchForm">
            <input type="text" name="search" value="<%= query.search || '' %>" placeholder="Search products..." class="search-input">
            <button type="submit" class="search-button">Search</button>
          </form>
  
          <form action="" method="GET" id="sortForm">
            <% if(query.category) { %>
            <input type="hidden" name="category" value="<%= query.category %>">
            <% } %>
            <% if(query.brand) { %>
            <input type="hidden" name="brand" value="<%= query.brand %>">
            <% } %>
            <% if(query.search) { %>
            <input type="hidden" name="search" value="<%= query.search %>">
            <% } %>
            <select name="sort" class="sort-dropdown" onchange="document.getElementById('sortForm').submit()">
              <option value="" <%= !query.sort ? 'selected' : '' %>>Sort By</option>
              <option value="price-asc" <%= query.sort === 'price-asc' ? 'selected' : '' %>>Price: Low to High</option>
              <option value="price-desc" <%= query.sort === 'price-desc' ? 'selected' : '' %>>Price: High to Low</option>
              <option value="name-asc" <%= query.sort === 'name-asc' ? 'selected' : '' %>>Name: A to Z</option>
              <option value="name-desc" <%= query.sort === 'name-desc' ? 'selected' : '' %>>Name: Z to A</option>
            </select>
          </form>
        </div>
  
        <div class="product-list-container">
          <aside class="sidebar">
            <a href="/shop" class="clear-filter-btn">Clear All Filters</a>
            <!-- Categories -->
            <div class="filter-section">
              <h3 class="filter-title">Categories</h3>
              <div class="filter-items">
                <% categories.forEach(category => { %>
                <div class="filter-item">
                  <a href="?category=<%= category._id %>&sort=<%= query.sort || '' %>&search=<%= query.search || '' %>">
                    <%= category.name %>
                  </a>
                </div>
                <% }) %>
              </div>
            </div>
  
            <!-- Brands -->
            <div class="filter-section">
              <h3 class="filter-title">Brands</h3>
              <div class="filter-items">
                <% brands.forEach(brand => { %>
                <div class="filter-item">
                  <a href="?brand=<%= brand._id %>&sort=<%= query.sort || '' %>&search=<%= query.search || '' %>">
                    <%= brand.brandName %>
                  </a>
                </div>
                <% }) %>
              </div>
            </div>
  
            <!-- Price Range -->
            <div class="filter-section">
              <h3 class="filter-title">Price Range</h3>
              <div class="price-filters">
                <button type="button" class="price-button" onclick="filterPrice(0, 10000)">Under ₹10000</button>
                <button type="button" class="price-button" onclick="filterPrice(10000, 50000)">₹10000 - ₹50000</button>
                <button type="button" class="price-button" onclick="filterPrice(50000, 150000)">₹50000 - ₹150000</button>
                <button type="button" class="price-button" onclick="filterPrice(150000, null)">Above ₹150000</button>
              </div>
            </div>
          </aside>
  
          <main class="product-grid">
            <% if (products.length === 0) { %>
            <div class="no-products">
                <h3>No products found</h3>
            </div>
            <% } else { %>
            <% products.forEach(product => { %>
                <div class="product-card">
                    <div class="product-img-wrapper">
                        <a href="/productDetails?id=<%= product._id %>">
                            <div class="product-img">
                                <img src="/uploads/re-image/<%= product.productImage[0] %>" 
                                     alt="<%= product.productName %>"
                                     class="primary-img">
                                <% if(product.productImage[1]) { %>
                                    <img src="/uploads/re-image/<%= product.productImage[1] %>" 
                                         alt="<%= product.productName %>"
                                         class="hover-img">
                                <% } %>
                            </div>
                        </a>
                        <% if(product.offerPercentage > 0) { %>
                            <div class="product-badge">Offer</div>
                        <% } else if(product.regularPrice > product.salesPrice) { %>
                            <div class="product-badge">Sale</div>
                        <% } %>
                        <button class="wishlist-btn" onclick="toggleWishlist('<%= product._id %>', this)" 
                                data-product-id="<%= product._id %>">
                            <i class="fas fa-heart"></i>
                        </button>
                    </div>
                    <div class="product-info">
                        <h4 class="product-name"><%= product.productName %></h4>
                        <p class="product-price">
                            <% if(product.offerPercentage > 0) { %>
                                <span class="original-price">₹<%= product.regularPrice %></span>
                                <span class="sale-price">₹<%= product.effectivePrice %></span>
                                <span class="offer-percentage">(<%= product.offerPercentage %>% OFF)</span>
                            <% } else if(product.regularPrice > product.salesPrice) { %>
                                <span class="original-price">₹<%= product.regularPrice %></span>
                                <span class="sale-price">₹<%= product.salesPrice %></span>
                            <% } else { %>
                                <span class="sale-price">₹<%= product.regularPrice %></span>
                            <% } %>
                        </p>
                        <button class="add-to-cart-btn <%= product.quantity <= 0 ? 'out-of-stock' : '' %>" 
                                onclick="addToCart('<%= product._id %>', <%= product.quantity %>, <%= product.isBlocked %>, <%= product.category.isListed %>, <%= product.brand.isBlocked %>)">
                            <%= product.quantity <= 0 ? 'Out of Stock' : 'Add to Cart' %>
                        </button>
                    </div>
                </div>
            <% }) %>
            <% } %>
  
            <!-- Pagination -->
            <% if (products.length > 0 && totalProducts !== undefined) { %>
            <div class="pagination">
              <% const totalPages = Math.ceil(totalProducts / 6); %>
              <% const currentPage = parseInt(query.page) || 1; %>
              
              <!-- Previous Button -->
              <a href="<%= currentPage > 1 ? `/shop?page=${currentPage - 1}&sort=${query.sort || ''}&search=${query.search || ''}&category=${query.category || ''}&brand=${query.brand || ''}&minPrice=${query.minPrice || ''}&maxPrice=${query.maxPrice || ''}` : '#' %>" 
                 class="page-link <%= currentPage === 1 ? 'disabled' : '' %>">
                Previous
              </a>
  
              <!-- Page Numbers -->
              <% for(let i = 1; i <= totalPages; i++) { %>
                <a href="/shop?page=<%= i %>&sort=<%= query.sort || '' %>&search=<%= query.search || '' %>&category=<%= query.category || '' %>&brand=<%= query.brand || '' %>&minPrice=<%= query.minPrice || '' %>&maxPrice=<%= query.maxPrice || '' %>" 
                   class="page-link <%= currentPage === i ? 'active' : '' %>">
                  <%= i %>
                </a>
              <% } %>
  
              <!-- Next Button -->
              <a href="<%= currentPage < totalPages ? `/shop?page=${currentPage + 1}&sort=${query.sort || ''}&search=${query.search || ''}&category=${query.category || ''}&brand=${query.brand || ''}&minPrice=${query.minPrice || ''}&maxPrice=${query.maxPrice || ''}` : '#' %>" 
                 class="page-link <%= currentPage === totalPages ? 'disabled' : '' %>">
                Next
              </a>
            </div>
            <% } %>
          </main>
        </div>
      </section>
    </div>
  
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function filterPrice(min, max) {
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set('minPrice', min);
            if (max) {
                currentUrl.searchParams.set('maxPrice', max);
            } else {
                currentUrl.searchParams.delete('maxPrice');
            }
            window.location.href = currentUrl.toString();
        }
    // Live Search Functionality
    let debounceTimer;
    async function liveSearch(searchTerm) {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(async () => {
            try {
                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.set('search', searchTerm);
                const response = await fetch(currentUrl.toString(), {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest' // Indicate AJAX request
                    }
                });
                const html = await response.text();
                document.querySelector('.product-grid').innerHTML = new DOMParser()
                    .parseFromString(html, 'text/html')
                    .querySelector('.product-grid').innerHTML;
            } catch (error) {
                console.error('Live search error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Search Error',
                    text: 'An error occurred while searching. Please try again.',
                    timer: 2000,
                    showConfirmButton: false
                });
            }
        }, 500); // Debounce for 500ms
    }

    async function addToCart(productId, quantity, isBlocked, categoryListed, brandBlocked) {
        // Check stock and other conditions first
        if (quantity <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Out of Stock',
                text: 'This product is currently out of stock.',
                timer: 2000,
                showConfirmButton: false
            });
            return;
        }
        if (isBlocked || !categoryListed || brandBlocked) {
            Swal.fire({
                icon: 'warning',
                title: 'Unavailable',
                text: 'This product is currently unavailable.',
                timer: 2000,
                showConfirmButton: false
            });
            return;
        }

        try {
            const response = await fetch('/add-to-cart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    productId
                }),
                credentials: 'include'
            });

            if (response.ok) {
                const data = await response.json();
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.message || 'Product added to cart successfully!',
                    timer: 1500,
                    showConfirmButton: false
                });
            } else if (response.status === 401 || response.redirected) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Login Required',
                    text: 'Please log in to add items to your cart.',
                }).then(() => {
                    window.location.href = '/login';
                });
            } else {
                const errorData = await response.json();
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to add product: ' + (errorData.message || 'Unknown error'),
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Error adding product to cart: ' + error.message,
            });
        }
    }

    // Load initial wishlist status when page loads
    document.addEventListener('DOMContentLoaded', async () => {
        const wishlistButtons = document.querySelectorAll('.wishlist-btn');

        wishlistButtons.forEach(async (btn) => {
            const productId = btn.getAttribute('data-product-id');
            try {
                const response = await fetch(`/wishlist/check-status?productId=${productId}`, {
                    credentials: 'include'
                });
                const data = await response.json();
                if (data.success && data.inWishlist) {
                    btn.classList.add('active');
                }
            } catch (error) {
                console.error('Error checking wishlist status:', error);
            }
        });
    });

    async function toggleWishlist(productId, button) {
        try {
            const isActive = button.classList.contains('active');
            const response = await fetch(`/wishlist/toggle/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            const data = await response.json();

            if (response.ok) {
                if (isActive) {
                    button.classList.remove('active');
                    button.classList.add('animate');
                    Swal.fire({
                        icon: 'success',
                        title: 'Removed',
                        text: data.message || 'Product removed from wishlist!',
                        timer: 1500,
                        showConfirmButton: false
                    });
                    setTimeout(() => button.classList.remove('animate'), 500);
                } else {
                    button.classList.add('active');
                    button.classList.add('animate');
                    Swal.fire({
                        icon: 'success',
                        title: 'Added',
                        text: data.message || 'Product added to wishlist!',
                        timer: 1500,
                        showConfirmButton: false
                    });
                    setTimeout(() => button.classList.remove('animate'), 500);
                }
            } else if (response.status === 401) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Login Required',
                    text: 'Please log in to manage your wishlist.',
                }).then(() => {
                    window.location.href = '/login';
                });
            } else {
                throw new Error(data.error || 'Unknown error');
            }
        } catch (error) {
            console.error('Wishlist toggle error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to update wishlist: ' + error.message,
            });
        }
    }
</script>
<%- include('../../views/partials/user/footer') %>
</body>
 