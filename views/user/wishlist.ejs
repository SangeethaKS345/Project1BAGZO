<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Wishlist - Your Store</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <link rel="stylesheet" href="https://cdn-uicons.flaticon.com/uicons-regular-straight/css/uicons-regular-straight.css">
  <link rel="stylesheet" href="/css/wishlist.css" type="text/css">
</head>

<body>
  <%- include('../../views/partials/user/header') %>

  <!--=============== MAIN ===============-->
  <main class="main">
    <!--=============== BREADCRUMB ===============-->
    <section class="breadcrumb">
      <div class="container">
        <ul class="breadcrumb-list">
          <li><a href="/" class="breadcrumb-link">Home</a></li>
          <li><span class="breadcrumb-separator">></span></li>
          <li><a href="/shop" class="breadcrumb-link">Shop</a></li>
          <li><span class="breadcrumb-separator">></span></li>
          <li><span class="breadcrumb-active">Wishlist</span></li>
        </ul>
      </div>
    </section>

    <!--=============== WISHLIST ===============-->
    <section class="wishlist section-lg">
      <div class="container">
        <h2 class="section-title">My Wishlist</h2>

        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Price</th>
                <th>Stock Status</th>
                <th>Action</th>
                <th>Remove</th>
              </tr>
            </thead>
            <tbody>
              <% if (wishlistItems && wishlistItems.length > 0) { %>
              <% wishlistItems.forEach(item => { %>
              <tr>
                <td>
                    <a href="/productDetails?id=<%= item.productId._id %>">
                      <img
                        src="/uploads/re-image/<%= item.productId.productImage && item.productId.productImage.length > 0 ? item.productId.productImage[0] : 'default-image.png' %>"
                        alt="<%= item.productId.productName || 'Product' %>"
                        class="table-img"
                      />
                    </a>
                  </td>
                  <td>
                    <a href="/productDetails?id=<%= item.productId._id %>" class="table-title-link">
                      <h3 class="table-title">
                        <%= item.productId.productName || 'Unnamed Product' %>
                      </h3>
                    </a>
                  </td>
                <td>
                  <span class="table-price">
                    â‚¹<%= item.productId.salesPrice || 'N/A' %>
                  </span>
                </td>
                <td>
                    <span class="table-stock <%= (item.productId.status === 'Available' && item.productId.quantity > 0) ? 'in-stock' : 'out-stock' %>">
                      <%= (item.productId.status === 'Available' && item.productId.quantity > 0) ? 'In Stock' : 'Out of Stock' %>
                    </span>
                  </td>
                <td>
                  <button onclick="addToCart('<%= item.productId._id %>')" class="btn btn-sm" data-product="<%= item.productId._id %>" data-default-size="<%= item.productId.combos && item.productId.combos.length > 0 ? item.productId.combos[0].size : '' %>">
                    Add to Cart
                  </button>
                </td>
                <td>
                  <button class="btn-icon" onclick="removeFromWishlist('<%= item.productId._id %>')">
                    <i class="fi fi-rs-trash"></i>
                  </button>
                </td>
              </tr>
              <% }); %>
              <% } else { %>
              <tr>
                <td colspan="6" class="empty-wishlist">
                  <div class="empty-state">
                    <i class="fi fi-rs-heart empty-icon"></i>
                    <p>Your wishlist is empty</p>
                    <a href="/shop" class="btn">Start Shopping</a>
                  </div>
                </td>
              </tr>
              <% } %>
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <div class="pagination">
          <% if (totalPages > 1) { %>
          <% if (currentPage > 1) { %>
          <a href="?page=<%= currentPage - 1 %>" class="pagination-link">Previous</a>
          <% } %>

          <% for(let i = 1; i <= totalPages; i++) { %>
          <a href="?page=<%= i %>" class="pagination-link <%= currentPage === i ? 'active' : '' %>"><%= i %></a>
          <% } %>

          <% if (currentPage < totalPages) { %>
          <a href="?page=<%= currentPage + 1 %>" class="pagination-link">Next</a>
          <% } %>
          <% } %>
        </div>
      </div>
    </section>
  </main>

  <%- include('../../views/partials/user/footer') %>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    async function addToCart(productId) {
      try {
        // Display loading indicator
        Swal.fire({
          title: 'Adding to cart...',
          allowOutsideClick: false,
          showConfirmButton: false,
          willOpen: () => {
            Swal.showLoading();
          }
        });

        // Get the default size from the data attribute
        const defaultSize = document.querySelector(`[data-product="${productId}"]`)?.getAttribute('data-default-size') || '';

        // Send request to add item to cart
        const response = await fetch('/add-to-cart', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            productId: productId,
            quantity: 1,
            selectedCombo: {
              size: defaultSize
            }
          })
        });

        // Parse response
        const data = await response.json();

        // Handle response
        if (response.ok) {
          Swal.fire({
            title: 'Success!',
            text: 'Product added to cart successfully',
            icon: 'success',
            showConfirmButton: false,
            timer: 1500
          }).then(() => {
            // Reload page to reflect wishlist removal
            window.location.reload();
          });

          // Update cart counter if it exists
          updateCartCounter();
        } else {
          Swal.fire({
            title: 'Error!',
            text: data.message || 'Failed to add product to cart',
            icon: 'error'
          });
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Something went wrong',
          icon: 'error'
        });
      }
    }

    async function removeFromWishlist(productId) {
      try {
        // Confirm removal
        const result = await Swal.fire({
          title: 'Remove from Wishlist?',
          text: "This item will be removed from your wishlist",
          icon: 'question',
          showCancelButton: true,
          confirmButtonColor: '#DB4437',
          cancelButtonColor: '#666666',
          confirmButtonText: 'Yes, remove it!',
          cancelButtonText: 'Cancel',
          heightAuto: false
        });

        // If confirmed, proceed with removal
        if (result.isConfirmed) {
          // Display loading indicator
          Swal.fire({
            title: 'Removing...',
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
              Swal.showLoading();
            }
          });

          // Send request to remove item
          const response = await fetch(`/wishlist/remove/${productId}`, {
            method: 'DELETE'
          });

          // Handle response
          if (response.ok) {
            Swal.fire({
              title: 'Removed!',
              text: 'Product has been removed from your wishlist',
              icon: 'success',
              showConfirmButton: false,
              timer: 1500
            }).then(() => {
              // Fade out the row before reloading
              const row = document.querySelector(`[data-product="${productId}"]`).closest('tr');
              if (row) {
                row.style.transition = 'opacity 0.5s';
                row.style.opacity = '0';
                setTimeout(() => {
                  window.location.reload();
                }, 500);
              } else {
                window.location.reload();
              }
            });
          } else {
            throw new Error('Failed to remove item');
          }
        }
      } catch (error) {
        console.error('Error removing item from wishlist:', error);
        Swal.fire({
          title: 'Error!',
          text: 'Failed to remove item from wishlist',
          icon: 'error'
        });
      }
    }

    function updateCartCounter() {
      // Get current cart count
      fetch('/cart/count')
        .then(response => response.json())
        .then(data => {
          const cartCounter = document.querySelector('.cart-counter');
          if (cartCounter && data.count !== undefined) {
            cartCounter.textContent = data.count;

            // Animate the counter
            cartCounter.classList.add('pulse');
            setTimeout(() => {
              cartCounter.classList.remove('pulse');
            }, 1000);
          }
        })
        .catch(error => {
          console.error('Error updating cart count:', error);
        });
    }
  </script>
</body>

</html>