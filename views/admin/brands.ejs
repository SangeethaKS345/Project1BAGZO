<link rel="stylesheet" href="/css/brand.css" type="text/css">
<%- include("../../views/partials/admin/header") %>
<body>
    <div class="container-fluid px-4">
        <div class="content-header row">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="content-title">Brands</h2>
            </div>
        </div>

        <header class="card-header mb-20">
            <div class="search-container">
                <form action="/admin/brands" method="get" class="d-inline" id="searchForm">
                    <div class="input-group border border-1 rounded-pill overflow-hidden" style="width: 100%;">
                        <input type="text" class="form-control border-0 rounded-pill" 
                               placeholder="Search brands or status..." 
                               name="search" 
                               id="searchInput" 
                               value="<%= typeof search !== 'undefined' ? search : '' %>" 
                               autocomplete="off">
                        <select class="form-select border-0" name="status" id="statusFilter">
                            <option value="all" <%= status === 'all' ? 'selected' : '' %>>All Status</option>
                            <option value="unblock" <%= status === 'unblock' ? 'selected' : '' %>>Active</option>
                            <option value="block" <%= status === 'block' ? 'selected' : '' %>>Blocked</option>
                        </select>
                        <button class="btn border-0" type="submit" style="display: none;">Search</button>
                        <button class="btn btn-secondary border-0 rounded-pill" type="button" onclick="clearSearch()">Clear</button>
                    </div>
                </form>
                <div class="search-suggestions" id="searchSuggestions"></div>
            </div>
        </header>

        <div class="row">
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body">
                        <form method="post" action="/admin/addBrand" enctype="multipart/form-data" id="brandForm">
                            <div class="mb-4">
                                <label for="brand_name" class="form-label">Brand Name</label>
                                <input type="text" name="name" id="brand_name" placeholder="Type here" class="form-control" />
                                <small class="text-danger d-none" id="nameError">Brand Name is required</small>
                            </div>
                            <label for="brand_image" class="form-label">Brand Image</label>
                            <div class="input-upload">
                                <img src="" alt="" id="previewImage" class="img-fluid" style="max-width: 100px;" />
                                <input class="form-control border" name="image" type="file" id="brand_image" accept="image/png, image/jpeg, image/jpg" />
                                <small class="text-danger d-none" id="imageError">Only JPG, JPEG, and PNG formats are allowed.</small>
                            </div>
                            <div class="d-grid mt-3">
                                <button class="btn btn-primary mt-20" type="submit">Add Brand</button>
                                <button type="button" class="btn btn-secondary mt-2" id="clearBtn">Clear</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-md-9">
                <div class="right">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th scope="col">Brand</th>
                                <th scope="col">Logo</th>
                                <th scope="col">Status</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody id="brandTableBody">
                            <% data.forEach((brand) => { %>
                            <tr>
                                <td><%= brand.brandName %></td>
                                <td>
                                    <div class="d-flex align-items-center justify-content-center" style="width: 40px; height: 40px; border-radius: 50%; overflow: hidden;">
                                        <img src="/Uploads/re-image/<%= brand.brandImage[0] || brand.brandImage %>" alt="<%= brand.brandName %>" class="img-fluid rounded-circle" />
                                    </div>
                                </td>
                                <td>
                                    <span id="brand-status-<%= brand._id %>" class="badge rounded-pill alert-<%= brand.isBlocked ? 'danger' : 'success' %>">
                                        <%= brand.isBlocked ? 'Blocked' : 'Active' %>
                                    </span>
                                </td>
                                <td>
                                    <button id="brand-btn-<%= brand._id %>" 
                                            onclick="toggleBrandStatus('<%= brand._id %>', '<%= brand.isBlocked %>')"
                                            class="btn-action <%= brand.isBlocked ? 'btn-success' : 'btn-danger' %>">
                                        <%= brand.isBlocked ? 'Unblock' : 'Block' %>
                                    </button>
                                    <button class="btn-action btn-danger delete-btn" 
                                            onclick="deleteBrand('<%= brand._id %>', '<%= brand.brandName %>')">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="container mt-3">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <!-- Previous Button -->
                    <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                        <a class="page-link pagination-arrow" href="?page=<%= currentPage - 1 %>&search=<%= encodeURIComponent(search) %>&status=<%= status %>" aria-label="Previous">
                            <span aria-hidden="true">«</span>
                        </a>
                    </li>
        
                    <!-- Page Numbers with Ellipsis -->
                    <% 
                        const maxPagesToShow = 5;
                        let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
                        let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
        
                        if (endPage === totalPages) {
                            startPage = Math.max(1, totalPages - maxPagesToShow + 1);
                        }
        
                        if (startPage > 1) { %>
                            <li class="page-item">
                                <a class="page-link pagination-number" href="?page=1&search=<%= encodeURIComponent(search) %>&status=<%= status %>">1</a>
                            </li>
                            <% if (startPage > 2) { %>
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            <% } %>
                    <% } %>
        
                    <!-- Page Numbers -->
                    <% for (let i = startPage; i <= endPage; i++) { %>
                        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                            <a class="page-link pagination-number" href="?page=<%= i %>&search=<%= encodeURIComponent(search) %>&status=<%= status %>"><%= i %></a>
                        </li>
                    <% } %>
        
                    <!-- Show last page and ellipsis if needed -->
                    <% if (endPage < totalPages) { %>
                        <% if (endPage < totalPages - 1) { %>
                            <li class="page-item disabled">
                                <span class="page-link">...</span>
                            </li>
                        <% } %>
                        <li class="page-item">
                            <a class="page-link pagination-number" href="?page=<%= totalPages %>&search=<%= encodeURIComponent(search) %>&status=<%= status %>"><%= totalPages %></a>
                        </li>
                    <% } %>
        
                    <!-- Next Button -->
                    <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                        <a class="page-link pagination-arrow" href="?page=<%= currentPage + 1 %>&search=<%= encodeURIComponent(search) %>&status=<%= status %>" aria-label="Next">
                            <span aria-hidden="true">»</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>

    <%- include("../../views/partials/admin/footer") %>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let debounceTimeout;

        function clearSearch() {
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            searchInput.value = '';
            statusFilter.value = 'all';
            searchBrands('', 'all');
        }

        function searchBrands(searchTerm, status) {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(() => {
                $.ajax({
                    url: `/admin/brands/?search=${encodeURIComponent(searchTerm)}&page=<%= currentPage %>&status=${status}`,
                    method: 'GET',
                    success: function(response) {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(response, 'text/html');
                        const newTableBody = doc.querySelector('#brandTableBody');
                        const newPagination = doc.querySelector('.pagination');
                        if (newTableBody) {
                            document.getElementById('brandTableBody').innerHTML = newTableBody.innerHTML;
                        }
                        if (newPagination) {
                            document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
                        }
                    },
                    error: function(err) {
                        console.error('Search error:', err);
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to fetch brands.',
                            icon: 'error',
                            confirmButtonColor: '#DB4437'
                        });
                    }
                });
            }, 300);
        }

        $('#searchInput').on('input', function() {
            const searchTerm = $(this).val().trim();
            const status = $('#statusFilter').val();
            searchBrands(searchTerm, status);
        });

        $('#statusFilter').on('change', function() {
            const status = $(this).val();
            const searchTerm = $('#searchInput').val().trim();
            searchBrands(searchTerm, status);
        });

        function toggleBrandStatus(brandId, isBlocked) {
            isBlocked = isBlocked === "true";
            let action = isBlocked ? "unblock" : "block";
            let newStatus = isBlocked ? "Active" : "Blocked";
            let newButtonClass = isBlocked ? "btn-action btn-danger" : "btn-action btn-success";
            let newButtonText = isBlocked ? "Block" : "Unblock";

            Swal.fire({
                title: `Are you sure you want to ${action} this brand?`,
                text: "You can change this status later if needed.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DB4437",
                cancelButtonColor: "#777777",
                confirmButtonText: `Yes, ${action} brand!`
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/${isBlocked ? 'un' : ''}blockBrand`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ id: brandId }),
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: action.charAt(0).toUpperCase() + action.slice(1) + "ed!",
                                text: `The brand has been ${action}ed successfully.`,
                                icon: "success",
                                confirmButtonColor: "#DB4437"
                            }).then(() => {
                                let button = document.getElementById(`brand-btn-${brandId}`);
                                let statusBadge = document.getElementById(`brand-status-${brandId}`);

                                if (button && statusBadge) {
                                    button.setAttribute("onclick", `toggleBrandStatus('${brandId}', '${!isBlocked}')`);
                                    button.className = newButtonClass;
                                    button.innerText = newButtonText;
                                    statusBadge.className = `badge rounded-pill alert-${isBlocked ? "success" : "danger"}`;
                                    statusBadge.innerText = newStatus;
                                } else {
                                    location.reload();
                                }
                            });
                        } else {
                            throw new Error(data.message || 'Operation failed');
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        Swal.fire({
                            title: "Error!",
                            text: `${error.message || "Something went wrong."}`,
                            icon: "error",
                            confirmButtonColor: "#DB4437"
                        });
                    });
                }
            });
        }

        function deleteBrand(brandId, brandName) {
            Swal.fire({
                title: 'Are you sure?',
                text: `You are about to delete the brand "${brandName}". This action cannot be undone!`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#DB4437',
                cancelButtonColor: '#777777',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('/admin/deleteBrand', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ id: brandId }),
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'The brand has been deleted.',
                                icon: 'success',
                                confirmButtonColor: '#DB4437'
                            }).then(() => {
                                document.getElementById(`brand-btn-${brandId}`).closest('tr').remove();
                            });
                        } else {
                            throw new Error(data.message || 'Deletion failed');
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        Swal.fire({
                            title: 'Error!',
                            text: `${error.message || "Something went wrong."}`,
                            icon: 'error',
                            confirmButtonColor: '#DB4437'
                        });
                    });
                }
            });
        }

        // Form Validation
        document.getElementById("brandForm").addEventListener("submit", function (e) {
            e.preventDefault();
            let valid = true;
            const brandName = document.getElementById("brand_name").value.trim();
            const brandImage = document.getElementById("brand_image").files[0];
            const nameError = document.getElementById("nameError");
            const imageError = document.getElementById("imageError");

            if (brandName === "") {
                nameError.classList.remove("d-none");
                valid = false;
            } else {
                nameError.classList.add("d-none");
            }

            if (brandImage) {
                const allowedExtensions = ["image/jpeg", "image/jpg", "image/png"];
                if (!allowedExtensions.includes(brandImage.type)) {
                    imageError.classList.remove("d-none");
                    valid = false;
                } else {
                    imageError.classList.add("d-none");
                }
            } else {
                imageError.classList.remove("d-none");
                valid = false;
            }

            if (valid) {
                Swal.fire({
                    title: 'Adding Brand',
                    text: 'Please wait...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                this.submit();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'Please check the form for errors',
                    confirmButtonColor: '#DB4437'
                });
            }
        });

        // Clear Form Button
        document.getElementById("clearBtn").addEventListener("click", function () {
            document.getElementById("brandForm").reset();
            document.getElementById("previewImage").src = "";
            document.getElementById("nameError").classList.add("d-none");
            document.getElementById("imageError").classList.add("d-none");
            Swal.fire({
                icon: 'info',
                title: 'Form Cleared',
                text: 'The form has been reset',
                timer: 1500,
                showConfirmButton: false
            });
        });

        // Image Preview
        document.getElementById("brand_image").addEventListener("change", function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function () {
                    document.getElementById("previewImage").src = reader.result;
                };
                reader.readAsDataURL(file);
            } else {
                document.getElementById("previewImage").src = "";
            }
        });

        // Success/Error toast notification
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const successMsg = urlParams.get('success');
            const errorMsg = urlParams.get('error');

            if (successMsg) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: decodeURIComponent(successMsg),
                    timer: 2000,
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false
                });
            } else if (errorMsg) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: decodeURIComponent(errorMsg),
                    timer: 3000,
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false
                });
            }
        });
    </script>
</body>

