<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
  /* CSS for Add Product Page */

.content-main {
  padding: 30px;
}

.content-header {
  margin-bottom: 30px;
}

.content-title {
  color: #DB4437;
  font-size: 24px;
  font-weight: 600;
}

.card {
  border: none;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  margin-bottom: 30px;
}

.card-header {
  background-color: white;
  border-bottom: 1px solid #eee;
  padding: 15px 20px;
}

.card-body {
  padding: 20px;
}

/* Form Styles */
.form-label {
  font-weight: 500;
  color: #555;
  margin-bottom: 8px;
}

.form-control, .form-select {
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 10px 15px;
  font-size: 14px;
}

.form-control:focus, .form-select:focus {
  border-color: #FF416C;
  box-shadow: 0 0 0 0.2rem rgba(255, 65, 108, 0.25);
}

textarea.form-control {
  min-height: 100px;
  resize: vertical;
}

/* Image Upload Styles */
.thumbnails-container {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 15px;
}

.thumbnails-container img {
  width: 80px;
  height: 80px;
  object-fit: cover;
  border-radius: 4px;
  border: 1px solid #ddd;
}

.image-cropper {
  margin-bottom: 20px;
}

#imgView1, #imgView2, #imgView3, #imgView4 {
  max-width: 100%;
  max-height: 200px;
  margin-bottom: 10px;
}

/* Button Styles */
.btn {
  font-weight: 500;
  padding: 10px 20px;
  border-radius: 6px;
  transition: all 0.3s;
}

.btn-primary {
  background-color: #FF416C;
  border-color: #FF416C;
}

.btn-primary:hover {
  background-color: #DB4437;
  border-color: #DB4437;
}

.btn-sm {
  padding: 5px 10px;
  font-size: 12px;
}

/* Error Messages */
.error-message {
  color: #dc3545;
  font-size: 14px;
  margin-top: 5px;
  display: none;
}

/* Row Styling */
.row {
  margin-bottom: 15px;
}

/* Border Styling */
.border {
  border: 1px solid #dee2e6 !important;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .content-main {
    padding: 15px;
  }
  
  .card-body {
    padding: 15px;
  }
  
  .col-lg-4 {
    margin-bottom: 15px;
  }
}
</style>
<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-8 mx-auto">
            <div class="card mb-4 shadow-sm">
                <div class="card-body">
                    <form method="post" action="/admin/addProducts" enctype="multipart/form-data"
                        onsubmit="return validateForm()">
                        <!-- Form-wide error alert -->
                        <div id="form-errors" class="alert alert-danger" style="display: none;"></div>
                        
                        <!-- Product Details Section -->
                        <div class="card mb-4 border-0 bg-light">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Basic Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-4">
                                        <label for="product_name" class="form-label fw-bold">Product Name <span class="text-danger">*</span></label>
                                        <input type="text" placeholder="Enter product name" name="productName"
                                            class="form-control border" id="product_name" required>
                                        <div id="productName-error" class="error-message text-danger small mt-1"></div>
                                    </div>
                                    
                                    <div class="col-md-6 mb-4">
                                        <label class="form-label fw-bold">Brand <span class="text-danger">*</span></label>
                                        <select class="form-select border" name="brand" required>
                                            <option value="">Select Brand</option>
                                            <% for (let i = 0; i < brand.length; i++) { %>  
                                                <option value="<%= brand[i]._id %>">
                                                    <%= brand[i].brandName %>
                                                </option>
                                            <% } %>
                                        </select>
                                        <div id="brand-error" class="error-message text-danger small mt-1"></div>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="col-12 mb-4">
                                        <label class="form-label fw-bold">Product Description <span class="text-danger">*</span></label>
                                        <textarea placeholder="Enter detailed product description" id="descriptionid" name="description" 
                                            class="form-control border" rows="4" required></textarea>
                                        <div id="description-error" class="error-message text-danger small mt-1"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Pricing & Inventory Section -->
                        <div class="card mb-4 border-0 bg-light">
                            <div class="card-header bg-success text-white">
                                <h5 class="mb-0"><i class="fas fa-tag me-2"></i>Pricing & Inventory</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-4 mb-4">
                                        <label class="form-label fw-bold">Regular price <span class="text-danger">*</span></label>
                                        <div class="input-group">
                                            <span class="input-group-text">₹</span>
                                            <input placeholder="0.00" name="regularPrice" type="number" step="0.01" min="0"
                                                class="form-control border" required>
                                        </div>
                                        <div id="regularPrice-error" class="error-message text-danger small mt-1"></div>
                                    </div>
                                    
                                    <div class="col-md-4 mb-4">
                                        <label class="form-label fw-bold">Sale price <span class="text-danger">*</span></label>
                                        <div class="input-group">
                                            <span class="input-group-text">₹</span>
                                            <input placeholder="0.00" name="salePrice" type="number" step="0.01" min="0" 
                                                class="form-control border" required>
                                        </div>
                                        <div id="salePrice-error" class="error-message text-danger small mt-1"></div>
                                    </div>
                                    
                                    <div class="col-md-4 mb-4">
                                        <label class="form-label fw-bold">Quantity <span class="text-danger">*</span></label>
                                        <input placeholder="1" name="quantity" type="number" min="0" 
                                            class="form-control border" required>
                                        <div id="quantity-error" class="error-message text-danger small mt-1"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Attributes Section -->
                        <div class="card mb-4 border-0 bg-light">
                            <div class="card-header bg-info text-white">
                                <h5 class="mb-0"><i class="fas fa-list-alt me-2"></i>Product Attributes</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-4">
                                        <label class="form-label fw-bold">Color <span class="text-danger">*</span></label>
                                        <input name="color" type="text" class="form-control border" placeholder="e.g., Red, Blue, Black" required>
                                        <div id="color-error" class="error-message text-danger small mt-1"></div>
                                    </div>
                                    
                                    <div class="col-md-6 mb-4">
                                        <label class="form-label fw-bold">Category <span class="text-danger">*</span></label>
                                        <select class="form-select border" name="category" required>
                                            <option value="">Select Category</option>
                                            <% for (let i=0; i<cat.length; i++){ %>
                                                <option value="<%=cat[i]._id %>">
                                                    <%=cat[i].name %>
                                                </option>
                                            <% } %>
                                        </select>
                                        <div id="category-error" class="error-message text-danger small mt-1"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Images Section -->
                        <div class="card mb-4 border-0 bg-light">
                            <div class="card-header bg-warning text-dark">
                                <h5 class="mb-0"><i class="fas fa-images me-2"></i>Product Images</h5>
                                <small class="d-block mt-1">At least 3 images required. You can crop images after uploading.</small>
                            </div>
                            
                            <div class="card-body">
                                <!-- Image preview thumbnails -->
                                <div class="mb-4">
                                    <label class="form-label fw-bold">Selected Images Preview:</label>
                                    <div id="addedImagesContainer" class="d-flex flex-wrap gap-3 p-2 border rounded bg-white"></div>
                                    <div id="images-error" class="error-message text-danger small mt-2"></div>
                                </div>
                                
                                <!-- Image upload cards -->
                                <div class="row">
                                    <!-- Image 1 -->
                                    <div class="col-md-6 mb-4">
                                        <div class="card h-100 border">
                                            <div class="card-header bg-light">
                                                <h6 class="mb-0">Image 1 <span class="text-danger">*</span></h6>
                                            </div>
                                            <div class="card-body">
                                                <div class="mb-3">
                                                    <input class="form-control" type="file" name="images" id="input1"
                                                        accept="image/png, image/jpeg, image/jpg"
                                                        onchange="handleImageSelect(event, 1)">
                                                </div>
                                                
                                                <div class="image-preview-container text-center mb-2">
                                                    <img src="" alt="" id="imgView1" class="img-fluid border rounded mb-2" style="display:none; max-height: 150px;">
                                                </div>
                                                
                                                <div class="button-group d-flex gap-2">
                                                    <button type="button" id="cropButton1" class="btn btn-sm btn-primary" onclick="initCropper(1)" style="display:none;">
                                                        <i class="fas fa-crop"></i> Crop
                                                    </button>
                                                    <button type="button" id="clearImage1" class="btn btn-sm btn-outline-danger" onclick="clearImage(1)" style="display:none;">
                                                        <i class="fas fa-times"></i> Clear
                                                    </button>
                                                </div>
                                                
                                                <!-- Cropper container -->
                                                <div id="cropperContainer1" class="cropper-container mt-3" style="display:none;">
                                                    <div class="d-flex justify-content-end mb-2">
                                                        <button type="button" class="btn btn-sm btn-secondary" onclick="cancelCrop(1)">
                                                            Cancel
                                                        </button>
                                                        <button type="button" id="saveButton1" class="btn btn-sm btn-success ms-2" onclick="saveCroppedImage(1)">
                                                            Save Crop
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Image 2 -->
                                    <div class="col-md-6 mb-4">
                                        <div class="card h-100 border">
                                            <div class="card-header bg-light">
                                                <h6 class="mb-0">Image 2 <span class="text-danger">*</span></h6>
                                            </div>
                                            <div class="card-body">
                                                <div class="mb-3">
                                                    <input class="form-control" type="file" name="images" id="input2"
                                                        accept="image/png, image/jpeg, image/jpg"
                                                        onchange="handleImageSelect(event, 2)">
                                                </div>
                                                
                                                <div class="image-preview-container text-center mb-2">
                                                    <img src="" alt="" id="imgView2" class="img-fluid border rounded mb-2" style="display:none; max-height: 150px;">
                                                </div>
                                                
                                                <div class="button-group d-flex gap-2">
                                                    <button type="button" id="cropButton2" class="btn btn-sm btn-primary" onclick="initCropper(2)" style="display:none;">
                                                        <i class="fas fa-crop"></i> Crop
                                                    </button>
                                                    <button type="button" id="clearImage2" class="btn btn-sm btn-outline-danger" onclick="clearImage(2)" style="display:none;">
                                                        <i class="fas fa-times"></i> Clear
                                                    </button>
                                                </div>
                                                
                                                <!-- Cropper container -->
                                                <div id="cropperContainer2" class="cropper-container mt-3" style="display:none;">
                                                    <div class="d-flex justify-content-end mb-2">
                                                        <button type="button" class="btn btn-sm btn-secondary" onclick="cancelCrop(2)">
                                                            Cancel
                                                        </button>
                                                        <button type="button" id="saveButton2" class="btn btn-sm btn-success ms-2" onclick="saveCroppedImage(2)">
                                                            Save Crop
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Image 3 -->
                                    <div class="col-md-6 mb-4">
                                        <div class="card h-100 border">
                                            <div class="card-header bg-light">
                                                <h6 class="mb-0">Image 3 <span class="text-danger">*</span></h6>
                                            </div>
                                            <div class="card-body">
                                                <div class="mb-3">
                                                    <input class="form-control" type="file" name="images" id="input3"
                                                        accept="image/png, image/jpeg, image/jpg"
                                                        onchange="handleImageSelect(event, 3)">
                                                </div>
                                                
                                                <div class="image-preview-container text-center mb-2">
                                                    <img src="" alt="" id="imgView3" class="img-fluid border rounded mb-2" style="display:none; max-height: 150px;">
                                                </div>
                                                
                                                <div class="button-group d-flex gap-2">
                                                    <button type="button" id="cropButton3" class="btn btn-sm btn-primary" onclick="initCropper(3)" style="display:none;">
                                                        <i class="fas fa-crop"></i> Crop
                                                    </button>
                                                    <button type="button" id="clearImage3" class="btn btn-sm btn-outline-danger" onclick="clearImage(3)" style="display:none;">
                                                        <i class="fas fa-times"></i> Clear
                                                    </button>
                                                </div>
                                                
                                                <!-- Cropper container -->
                                                <div id="cropperContainer3" class="cropper-container mt-3" style="display:none;">
                                                    <div class="d-flex justify-content-end mb-2">
                                                        <button type="button" class="btn btn-sm btn-secondary" onclick="cancelCrop(3)">
                                                            Cancel
                                                        </button>
                                                        <button type="button" id="saveButton3" class="btn btn-sm btn-success ms-2" onclick="saveCroppedImage(3)">
                                                            Save Crop
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Image 4 (Optional) -->
                                    <div class="col-md-6 mb-4">
                                        <div class="card h-100 border">
                                            <div class="card-header bg-light">
                                                <h6 class="mb-0">Image 4 (Optional)</h6>
                                            </div>
                                            <div class="card-body">
                                                <div class="mb-3">
                                                    <input class="form-control" type="file" name="images" id="input4"
                                                        accept="image/png, image/jpeg, image/jpg"
                                                        onchange="handleImageSelect(event, 4)">
                                                </div>
                                                
                                                <div class="image-preview-container text-center mb-2">
                                                    <img src="" alt="" id="imgView4" class="img-fluid border rounded mb-2" style="display:none; max-height: 150px;">
                                                </div>
                                                
                                                <div class="button-group d-flex gap-2">
                                                    <button type="button" id="cropButton4" class="btn btn-sm btn-primary" onclick="initCropper(4)" style="display:none;">
                                                        <i class="fas fa-crop"></i> Crop
                                                    </button>
                                                    <button type="button" id="clearImage4" class="btn btn-sm btn-outline-danger" onclick="clearImage(4)" style="display:none;">
                                                        <i class="fas fa-times"></i> Clear
                                                    </button>
                                                </div>
                                                
                                                <!-- Cropper container -->
                                                <div id="cropperContainer4" class="cropper-container mt-3" style="display:none;">
                                                    <div class="d-flex justify-content-end mb-2">
                                                        <button type="button" class="btn btn-sm btn-secondary" onclick="cancelCrop(4)">
                                                            Cancel
                                                        </button>
                                                        <button type="button" id="saveButton4" class="btn btn-sm btn-success ms-2" onclick="saveCroppedImage(4)">
                                                            Save Crop
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Form Action Buttons -->
                        <div class="d-flex gap-2 justify-content-end mt-4">
                            <button class="btn btn-lg btn-outline-secondary" type="reset" onclick="resetForm()">
                                <i class="fas fa-undo me-2"></i>Reset
                            </button>
                            <button class="btn btn-lg btn-primary" type="submit">
                                <i class="fas fa-save me-2"></i>Publish Product
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<%- include("../../views/partials/admin/footer") %>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<script>
    // Global variables to store croppers and original form data
let activeCropper = null;
let originalFormData = {};

// Store original form data when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Save original form data
    saveOriginalFormData();
    
    // Set up event listeners
    setupEventListeners();
    
    // Initialize the file inputs based on current image state
    updateFileInputStates();
    
    // Add CSS for disabled inputs
    const style = document.createElement('style');
    style.textContent = `
        .disabled-input {
            background-color: #e9ecef;
            cursor: not-allowed;
        }
    `;
    document.head.appendChild(style);
});

function saveOriginalFormData() {
    const form = document.getElementById('productForm');
    originalFormData = {
        productName: form.productName.value,
        brand: form.brand.value,
        descriptionData: form.descriptionData.value,
        regularPrice: form.regularPrice.value,
        salesPrice: form.salesPrice.value,
        quantity: form.quantity.value,
        category: form.category.value,
        image1: form.hiddenImage1.value,
        image2: form.hiddenImage2.value,
        image3: form.hiddenImage3.value,
        image4: form.hiddenImage4.value
    };
}

function updateFileInputStates() {
    // For each image slot, check if there's an existing image
    for (let i = 1; i <= 4; i++) {
        const hiddenImageValue = document.getElementById(`hiddenImage${i}`).value;
        const fileInput = document.getElementById(`input${i}`);
        const imgSrc = document.getElementById(`imgView${i}`).src;
        
        // If there's an image (not deleted and not placeholder), disable the file input
        if (hiddenImageValue && hiddenImageValue !== 'deleted' && !imgSrc.includes('placeholder.jpg')) {
            fileInput.disabled = true;
            fileInput.classList.add('disabled-input');
        } else {
            fileInput.disabled = false;
            fileInput.classList.remove('disabled-input');
        }
    }
}

function setupEventListeners() {
    // Image delete buttons
    document.querySelectorAll('.delete-image-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const imageId = this.dataset.imageId;
            deleteImage(imageId);
        });
    });
    
    // Image reset buttons
    document.querySelectorAll('.reset-image-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const imageId = this.dataset.imageId;
            resetImage(imageId);
        });
    });
    
    // Crop save buttons
    document.querySelectorAll('.crop-save-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const index = this.dataset.index;
            saveCroppedImage(index);
        });
    });
    
    // Crop cancel buttons
    document.querySelectorAll('.crop-cancel-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const index = this.dataset.index;
            cancelCropping(index);
        });
    });
    
    // Update button
    document.getElementById('updatebtn').addEventListener('click', function() {
        validateAndSubmitForm();
    });
    
    // Reset All button
    document.getElementById('resetAllBtn').addEventListener('click', function() {
        resetAllImages();
    });
    
    // Clear All Changes button
    document.getElementById('clearAllBtn').addEventListener('click', function() {
        clearAllChanges();
    });

    // Context menu for existing images
    for (let i = 1; i <= 4; i++) {
        const imgView = document.getElementById(`imgView${i}`);
        
        imgView.addEventListener('contextmenu', function(e) {
            e.preventDefault();
            
            // Only show crop option if this is not a placeholder image
            if (!imgView.src.includes('placeholder.jpg')) {
                Swal.fire({
                    title: 'Image Options',
                    text: 'Would you like to crop this existing image?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, crop it',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        initializeCropping(i, imgView.src);
                    }
                });
            }
        });
    }
}

// Initialize image cropping
function initializeCropping(index, src) {
    const cropperContainer = document.getElementById(`cropperContainer${index}`);
    const cropperWrapper = document.getElementById(`cropperWrapper${index}`);
    
    // Destroy any existing cropper
    if (activeCropper) {
        activeCropper.destroy();
        activeCropper = null;
    }
    
    // Setup for cropping
    cropperContainer.style.display = 'block';
    
    // Create image element for cropper
    const img = document.createElement('img');
    img.id = `cropperImage${index}`;
    img.src = src;
    img.style.maxWidth = '100%';
    
    // Clear previous content and add new image
    cropperWrapper.innerHTML = '';
    cropperWrapper.appendChild(img);
    
    // Initialize cropper
    activeCropper = new Cropper(img, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1,
        responsive: true
    });
}

// Handle image selection for upload and cropping
function handleImageSelect(event, index) {
    const file = event.target.files[0];
    if (!file) return;
    
    // Check file type
    if (!file.type.match('image/jpeg') && !file.type.match('image/png') && !file.type.match('image/jpg')) {
        Swal.fire('Error', 'Please select a valid image file (JPEG, JPG or PNG)', 'error');
        event.target.value = '';
        return;
    }
    
    // Mark this image as "changed" by setting the hidden input to empty
    document.getElementById(`hiddenImage${index}`).value = 'replaced';
    
    // Show cropper
    const reader = new FileReader();
    reader.onload = function(e) {
        initializeCropping(index, e.target.result);
    };
    
    reader.readAsDataURL(file);
}

// Save cropped image
function saveCroppedImage(index) {
    if (!activeCropper) return;
    
    // Get cropped canvas
    const canvas = activeCropper.getCroppedCanvas({
        width: 800,
        height: 800
    });
    
    if (!canvas) return;
    
    // Update preview image
    const imgView = document.getElementById(`imgView${index}`);
    imgView.src = canvas.toDataURL();
    
    // Convert to Blob and create File
    canvas.toBlob(function(blob) {
        const fileName = `cropped_image_${index}.jpg`;
        const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
        
        // Create a new FileList-like object
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(croppedFile);
        
        // Set the file input value
        const fileInput = document.getElementById(`input${index}`);
        fileInput.files = dataTransfer.files;
        
        // Hide cropper
        cancelCropping(index);
        
        // Set hidden input value to empty (indicating it's changed)
        document.getElementById(`hiddenImage${index}`).value = '';
    }, 'image/jpeg');
}

// Cancel cropping
function cancelCropping(index) {
    if (activeCropper) {
        activeCropper.destroy();
        activeCropper = null;
    }
    
    document.getElementById(`cropperContainer${index}`).style.display = 'none';
    
    // If no file was selected, reset the file input
    if (document.getElementById(`input${index}`).files.length === 0) {
        document.getElementById(`input${index}`).value = '';
    }
}

// Delete image
function deleteImage(imageId) {
    Swal.fire({
        title: 'Delete Image',
        text: 'Are you sure you want to delete this image?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            // Clear the file input
            document.getElementById(`input${imageId}`).value = '';
            
            // Set preview to placeholder
            document.getElementById(`imgView${imageId}`).src = '/uploads/re-image/placeholder.jpg';
            
            // Set hidden input to indicate deletion
            document.getElementById(`hiddenImage${imageId}`).value = 'deleted';
            
            // If there's an active cropper, destroy it
            if (activeCropper) {
                activeCropper.destroy();
                activeCropper = null;
                document.getElementById(`cropperContainer${imageId}`).style.display = 'none';
            }
            
            // Enable the file input now that the image is deleted
            document.getElementById(`input${imageId}`).disabled = false;
            document.getElementById(`input${imageId}`).classList.remove('disabled-input');
            
            Swal.fire('Deleted!', 'The image has been deleted.', 'success');
        }
    });
}

// Reset single image
function resetImage(imageId) {
    const originalImage = originalFormData[`image${imageId}`];
    
    // Reset hidden input value
    document.getElementById(`hiddenImage${imageId}`).value = originalImage;
    
    // Reset file input
    document.getElementById(`input${imageId}`).value = '';
    
    // Reset preview image
    document.getElementById(`imgView${imageId}`).src = originalImage ? `/uploads/re-image/${originalImage}` : '/uploads/re-image/placeholder.jpg';
    
    // Update file input state (disable if image exists)
    updateFileInputState(imageId);
    
    Swal.fire('Reset', 'Image has been reset to original.', 'info');
}

// Update a single file input state
function updateFileInputState(imageId) {
    const hiddenImageValue = document.getElementById(`hiddenImage${imageId}`).value;
    const fileInput = document.getElementById(`input${imageId}`);
    const imgSrc = document.getElementById(`imgView${imageId}`).src;
    
    if (hiddenImageValue && hiddenImageValue !== 'deleted' && !imgSrc.includes('placeholder.jpg')) {
        fileInput.disabled = true;
        fileInput.classList.add('disabled-input');
    } else {
        fileInput.disabled = false;
        fileInput.classList.remove('disabled-input');
    }
}

// Reset all images
function resetAllImages() {
    Swal.fire({
        title: 'Reset All Images',
        text: 'Are you sure you want to reset all images to their original state?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, reset all!'
    }).then((result) => {
        if (result.isConfirmed) {
            for (let i = 1; i <= 4; i++) {
                document.getElementById(`hiddenImage${i}`).value = originalFormData[`image${i}`];
                document.getElementById(`input${i}`).value = '';
                document.getElementById(`imgView${i}`).src = originalFormData[`image${i}`] ? 
                    `/uploads/re-image/${originalFormData[`image${i}`]}` : 
                    '/uploads/re-image/placeholder.jpg';
                
                // Destroy cropper if active
                if (activeCropper) {
                    activeCropper.destroy();
                    activeCropper = null;
                    document.getElementById(`cropperContainer${i}`).style.display = 'none';
                }
            }
            
            // Update all file input states
            updateFileInputStates();
            
            Swal.fire('Reset', 'All images have been reset to original.', 'success');
        }
    });
}

// Clear all changes
function clearAllChanges() {
    Swal.fire({
        title: 'Clear All Changes',
        text: 'Are you sure you want to discard all your changes?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, discard all!'
    }).then((result) => {
        if (result.isConfirmed) {
            // Reset form fields
            const form = document.getElementById('productForm');
            form.productName.value = originalFormData.productName;
            form.brand.value = originalFormData.brand;
            form.descriptionData.value = originalFormData.descriptionData;
            form.regularPrice.value = originalFormData.regularPrice;
            form.salesPrice.value = originalFormData.salesPrice;
            form.quantity.value = originalFormData.quantity;
            form.category.value = originalFormData.category;
            
            // Reset all images
            resetAllImages();
            
            // Clear error messages
            document.querySelectorAll('.error-message').forEach(el => {
                el.innerHTML = '';
            });
            
            Swal.fire('Cleared', 'All changes have been discarded.', 'success');
        }
    });
}

// Validate the form
function validateForm() {
    clearErrorMessages();
    let isValid = true;
    
    // Validate product name
    const name = document.getElementById('product_name').value;
    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s\-_'.]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name contains invalid characters.');
        isValid = false;
    }
    
    // Validate description
    const description = document.getElementById('descriptionid').value;
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }
    
    // Validate brand
    const brand = document.getElementsByName('brand')[0].value;
    if (!brand) {
        displayErrorMessage('brand-error', 'Please select a brand.');
        isValid = false;
    }
    
    // Validate category
    const category = document.getElementsByName('category')[0].value;
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }
    
    // Validate price fields
    const regularPrice = parseFloat(document.getElementsByName('regularPrice')[0].value);
    const salePrice = parseFloat(document.getElementsByName('salePrice')[0].value);
    
    if (isNaN(regularPrice) || regularPrice <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid positive price.');
        isValid = false;
    }
    
    if (isNaN(salePrice) || salePrice < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }
    
    if (!isNaN(regularPrice) && !isNaN(salePrice) && salePrice >= regularPrice) {
        displayErrorMessage('salePrice-error', 'Sale price must be less than regular price.');
        isValid = false;
    }
    
    // Validate quantity
    const quantity = parseInt(document.getElementsByName('quantity')[0].value);
if (isNaN(quantity) || quantity < 0) {  
    displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
    isValid = false;
}

    
    // Validate color
    const color = document.getElementsByName('color')[0].value;
    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }
    
    // Count selected images
    let imageCount = 0;
    for (let i = 1; i <= 4; i++) {
        if (selectedImages[i]) {
            imageCount++;
        }
    }
    
    // Validate image count
    if (imageCount < 3) {
        displayErrorMessage('images-error', `You've selected ${imageCount} image(s). At least 3 images are required.`);
        isValid = false;
    }
    
    // Additional validation for image files
    const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
    for (let i = 0; i < imageInputs.length; i++) {
        const input = imageInputs[i];
        if (input.files.length > 0) {
            const file = input.files[0];
            if (!isValidImageFile(file)) {
                displayErrorMessage('images-error', `Invalid file type in Image ${i+1}. Only JPG, JPEG, or PNG files are allowed.`);
                isValid = false;
                break;
            }
        }
    }
    
    // Check if any cropper is active (user might have forgotten to save a crop)
    let hasActiveCropper = false;
    for (let i = 1; i <= 4; i++) {
        if (croppers[i]) {
            hasActiveCropper = true;
            break;
        }
    }
    
    if (hasActiveCropper) {
        if (!confirm('You have unsaved cropped images. Do you want to continue without saving them?')) {
            return false;
        }
    }
    
    // If validation failed, show summary error
    if (!isValid) {
        const formErrors = document.getElementById('form-errors');
        formErrors.textContent = 'Please correct the errors highlighted below.';
        formErrors.style.display = 'block';
        
        // Scroll to the first error
        const firstError = document.querySelector('.error-message:not(:empty)');
        if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }
    
    return isValid;
}

// Display an error message
function displayErrorMessage(elementId, message) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = message;
        element.style.display = 'block';
    }
}

// Clear all error messages
function clearErrorMessages() {
    const errorMessages = document.querySelectorAll('.error-message');
    errorMessages.forEach(element => {
        element.textContent = '';
        element.style.display = 'none';
    });
    
    const formErrors = document.getElementById('form-errors');
    formErrors.style.display = 'none';
}

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
    // Initialize thumbnail container
    updateThumbnailsPreview();
});
</script>
