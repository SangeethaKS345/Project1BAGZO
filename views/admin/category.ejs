<%- include("../../views/partials/admin/header") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
    <link rel="stylesheet" href="/css/category.css">
    <style>
        .modal-backdrop {
            z-index: 1040 !important;
        }
        .modal {
            z-index: 1050 !important;
        }
        .search-container {
            position: relative;
            display: inline-block;
        }
        .search-suggestions {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            display: none;
        }
        .search-suggestions div {
            padding: 8px;
            cursor: pointer;
        }
        .search-suggestions div:hover {
            background-color: #f0f0f0;
        }
    </style>
</head>

<body>
    <section class="content-main">
        <div class="content-header">
            <div>
                <h2 class="content-title card-title">Category</h2>
            </div>
        </div>

        <header class="search-container text-center mb-4">
            <form action="/admin/category/" method="get" class="d-inline" id="searchForm">
                <div class="input-group input-group-sm rounded-pill" style="width: 500px; margin: 0 auto;">
                    <input type="text" class="form-control rounded-pill" placeholder="Search categories, descriptions, or offers" 
                           name="search" id="searchInput" value="<%= typeof search !== 'undefined' ? search : '' %>" autocomplete="off"/>
                    <button class="btn" type="submit" style="display: none;">Search</button>
                    <button class="btn btn-secondary" type="button" onclick="clearSearch()">Clear</button>
                </div>
            </form>
            <div class="search-suggestions" id="searchSuggestions"></div>
        </header>

        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-container">
                            <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Name</label>
                                    <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" novalidate/>
                                    <div id="name-error" class="error-message"></div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Description</label>
                                    <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId" novalidate></textarea>
                                    <div id="description-error" class="error-message"></div>
                                </div>
                                <div class="d-grid">
                                    <button class="btn btn-primary" type="submit">Create category</button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <div class="col-md-9">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th></th>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Offer Percentage</th>
                                        <th>Offer</th>
                                        <th>Status</th>
                                        <th>List/Unlist</th>
                                        <th>Edit</th>
                                    </tr>
                                </thead>
                                <tbody id="categoryTableBody">
                                    <% if (cat && cat.length > 0) { %>
                                    <% cat.forEach((category) => { %>
                                    <tr>
                                        <td></td>
                                        <td class="text-start"><%= category.name %></td>
                                        <td class="text-start"><%= category.description %></td>
                                        <td class="text-start">
                                            <%= category.categoryOffer ? category.categoryOffer + '%' : '0%' %>
                                        </td>
                                        <td class="text-start">
                                            <% if(category.categoryOffer === 0) { %>
                                            <button class="btn btn-info" style="width: 100px">
                                                <a href="#" class="text-white" onclick="addOffer('<%= category._id %>')">Add Offer</a>
                                            </button>
                                            <% } else { %>
                                            <button class="btn btn-info" style="width: 100px">
                                                <a href="#" class="text-white" onclick="removeOffer('<%= category._id %>')">Remove</a>
                                            </button>
                                            <% } %>
                                        </td>
                                        <td class="text-start">
                                            <span class="status-badge <%= category.isListed ? 'status-listed' : 'status-unlisted' %>" id="status-<%= category._id %>">
                                                <%= category.isListed ? 'LISTED' : 'UNLISTED' %>
                                            </span>
                                        </td>
                                        <td class="text-start">
                                            <button id="toggle-btn-<%= category._id %>" 
                                                    onclick="toggleCategoryStatus('<%= category._id %>', '<%= category.isListed %>')" 
                                                    class="btn <%= category.isListed ? 'btn-danger' : 'btn-success' %> action-btn">
                                                <%= category.isListed ? 'Unlist' : 'List' %>
                                            </button>
                                        </td>
                                        <td class="text-start">
                                            <a href="/admin/editCategory?id=<%= category._id %>" class="btn btn-info">Edit</a>
                                        </td>
                                    </tr>
                                    <% }) %>
                                    <% } else { %>
                                    <tr>
                                        <td colspan="8" class="text-center">No categories found.</td>
                                    </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="pagination-container">
            <% if (currentPage > 1) { %>
            <a href="?page=<%= currentPage - 1 %>&search=<%= typeof search !== 'undefined' ? search : '' %>">« Previous</a>
            <% } %>
            <% for (let i = 1; i <= totalPages; i++) { %>
            <% if (i === currentPage) { %>
            <span class="current-page"><%= i %></span>
            <% } else { %>
            <a href="?page=<%= i %>&search=<%= typeof search !== 'undefined' ? search : '' %>"><%= i %></a>
            <% } %>
            <% } %>
            <% if (currentPage < totalPages) { %>
            <a href="?page=<%= currentPage + 1 %>&search=<%= typeof search !== 'undefined' ? search : '' %>">Next »</a>
            <% } %>
        </div>

        <div class="modal fade" id="addOfferModal" tabindex="-1" aria-labelledby="addOfferModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header" style="background-color: #007bff; color: white;">
                        <h5 class="modal-title" id="addOfferModalLabel">Add Offer</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addOfferForm">
                            <input type="hidden" id="offerCategoryId" name="categoryId">
                            <div class="mb-3">
                                <label for="offerPercentage" class="form-label">Offer Percentage:</label>
                                <input type="number" class="form-control" id="offerPercentage" name="percentage" min="0" max="100" novalidate>
                                <div id="offerPercentageError" class="text-danger"></div>
                            </div>
                            <div class="mb-3">
                                <label for="offerEndDate" class="form-label">End Date:</label>
                                <input type="date" class="form-control" id="offerEndDate" name="endDate" novalidate>
                                <div id="offerEndDateError" class="text-danger"></div>
                            </div>
                            <button type="submit" class="btn btn-primary" id="saveOfferBtn">Save Offer</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let debounceTimeout;

        function clearSearch() {
            const searchInput = document.getElementById('searchInput');
            searchInput.value = '';
            searchCategories('');
        }

        function searchCategories(searchTerm) {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(() => {
                $.ajax({
                    url: '/admin/category/',
                    method: 'GET',
                    data: { search: searchTerm, page: `<%= currentPage %>` },
                    success: function(response) {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(response, 'text/html');
                        const newTableBody = doc.querySelector('tbody');
                        if (newTableBody) {
                            document.getElementById('categoryTableBody').innerHTML = newTableBody.innerHTML;
                        }
                    },
                    error: function(err) {
                        console.error('Search error:', err);
                    }
                });
            }, 300);
        }

        $('#searchInput').on('input', function() {
            const searchTerm = $(this).val().trim();
            searchCategories(searchTerm);
        });

        async function handleFormSubmit(event) {
            event.preventDefault();
            if (!validateForm()) {
                return false;
            }

            const name = document.querySelector('input[name="name"]').value.trim();
            const description = document.getElementById("descriptionId").value.trim();

            try {
                const response = await fetch('/admin/addCategory', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, description })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Something went wrong');
                }

                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.message,
                    confirmButtonColor: "#FF416C"
                });

                window.location.reload();
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    confirmButtonColor: "#DB4437"
                });
            }
        }
        
    async function handleFormSubmit(event) {
      event.preventDefault();
      if (!validateForm()) {
        return false;
      }

      const name = document.querySelector('input[name="name"]').value.trim();
      const description = document.getElementById("descriptionId").value.trim();

      try {
        const response = await fetch('/admin/addCategory', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name,
            description
          }),
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || 'Something went wrong');
        }

        await Swal.fire({
          icon: 'success',
          title: 'Success',
          text: data.message,
          confirmButtonColor: "#FF416C"
        });

        window.location.reload();
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message,
          confirmButtonColor: "#DB4437"
        });
      }
    }

    function validateForm() {
      clearErrorMessages();

      const name = document.getElementsByName("name")[0].value.trim();
      const description = document.getElementById("descriptionId").value.trim();
      let isValid = true;

      if (name === "") {
        displayErrorMessage("name-error", "Please enter a category name.");
        isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Category name should contain only alphabetic characters.");
        isValid = false;
      }

      if (description === "") {
        displayErrorMessage("description-error", "Please enter a description.");
        isValid = false;
      }

      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessages() {
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
      });
    }

    function toggleCategoryStatus(categoryId, isListed) {
  isListed = isListed === 'true' || isListed === true;
  const action = isListed ? 'unlist' : 'list';

  Swal.fire({
    title: `Are you sure you want to ${action} this category?`,
    text: "You can change it later if needed.",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#FF416C",
    cancelButtonColor: "#DB4437",
    confirmButtonText: `Yes, ${action} it!`
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/admin/${action}Category?id=${categoryId}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          // Update the UI elements
          const statusBadge = document.getElementById(`status-${categoryId}`);
          const toggleButton = document.getElementById(`toggle-btn-${categoryId}`);

          // If we're listing the category
          if (action === 'list') {
            statusBadge.className = 'status-badge status-listed';
            statusBadge.textContent = 'LISTED';
            toggleButton.className = 'btn btn-danger action-btn';
            toggleButton.textContent = 'Unlist';
            // Update the onclick with the new status (true for listed)
            toggleButton.setAttribute('onclick', `toggleCategoryStatus('${categoryId}', 'true')`);
          } else {
            // If we're unlisting the category
            statusBadge.className = 'status-badge status-unlisted';
            statusBadge.textContent = 'UNLISTED';
            toggleButton.className = 'btn btn-success action-btn';
            toggleButton.textContent = 'List';
            // Update the onclick with the new status (false for unlisted)
            toggleButton.setAttribute('onclick', `toggleCategoryStatus('${categoryId}', 'false')`);
          }

          Swal.fire({
            title: 'Success!',
            text: data.message,
            icon: 'success',
            confirmButtonColor: "#FF416C"
          });
        } else {
          throw new Error(data.message || "Something went wrong");
        }
      })
      .catch(error => {
        console.error("Error:", error);
        Swal.fire({
          title: "Error!",
          text: error.message || "Something went wrong",
          icon: "error",
          confirmButtonColor: "#DB4437"
        });
      });
    }
  });
}

function addOffer(categoryId) {
            $('#addOfferModal').modal('show');
            $('#offerCategoryId').val(categoryId);
            $('#offerPercentageError').text('');  // Clear errors when opening modal
            $('#offerEndDateError').text('');
        }

        async function removeOffer(categoryId) {
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to remove this offer?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#FF416C',
                cancelButtonColor: '#DB4437',
                confirmButtonText: 'Yes, remove it!'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/removeCategoryOffer/${categoryId}`, {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        Swal.fire('Success!', data.message, 'success');
                        window.location.reload();
                    } else {
                        Swal.fire('Error!', data.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error!', 'Something went wrong', 'error');
                }
            }
        }

        $('#addOfferForm').on('submit', async function(e) {
            e.preventDefault();
            const categoryId = $('#offerCategoryId').val();
            const percentage = $('#offerPercentage').val();
            const endDate = $('#offerEndDate').val();

            let isValid = true;
            $('#offerPercentageError').text('');
            $('#offerEndDateError').text('');

            // Check if fields are empty
            if (!percentage) {
                $('#offerPercentageError').text('Offer percentage is required');
                isValid = false;
            } else if (percentage < 0 || percentage > 100) {
                $('#offerPercentageError').text('Percentage must be between 0 and 100');
                isValid = false;
            }

            if (!endDate) {
                $('#offerEndDateError').text('End date is required');
                isValid = false;
            } else {
                const today = new Date().toISOString().split('T')[0];
                if (endDate < today) {
                    $('#offerEndDateError').text('End date cannot be in the past');
                    isValid = false;
                }
            }

            if (isValid) {
                try {
                    const response = await fetch('/admin/addCategoryOffer', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ categoryId, percentage: parseInt(percentage), endDate })
                    });
                    const data = await response.json();

                    if (data.success) {
                        Swal.fire('Success!', data.message, 'success');
                        $('#addOfferModal').modal('hide');
                        window.location.reload();
                    } else {
                        Swal.fire('Error!', data.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error!', 'Something went wrong', 'error');
                }
            }
        });
    </script>
  <%- include("../../views/partials/admin/footer") %>