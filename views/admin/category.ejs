<%- include("../../views/partials/admin/header") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
    <link rel="stylesheet" href="/css/category.css">
</head>

<body>
    <div class="container-fluid px-4">
        <div class="content-header row">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="content-title">Category</h2>
            </div>
        </div>
        
        <header class="card-header mb-20">
            <div class="row align-items-center">
                <!-- Search Container -->
                <div class="col-md-8 col-sm-12 mb-3 mb-md-0">
                    <div class="search-container">
                        <form action="/admin/category/" method="get" class="d-inline" id="searchForm">
                            <div class="input-group border border-1 rounded-pill overflow-hidden">
                                <input type="text" class="form-control border-0 rounded-pill" 
                                       placeholder="Search categories, descriptions, or offers" 
                                       name="search" 
                                       id="searchInput" 
                                       value="<%= typeof search !== 'undefined' ? search : '' %>" 
                                       autocomplete="off">
                                <button class="btn btn-secondary border-0 rounded-pill" type="button" onclick="clearSearch()">Clear</button>
                            </div>
                        </form>
                        <div class="search-suggestions" id="searchSuggestions"></div>
                    </div>
                </div>
                <!-- Filter Container -->
                <div class="col-md-4 col-sm-12">
                    <div class="filter-container">
                        <select class="form-select" name="status" id="statusFilter">
                            <option value="all" <%= status === 'all' ? 'selected' : '' %>>All Status</option>
                            <option value="listed" <%= status === 'listed' ? 'selected' : '' %>>Listed</option>
                            <option value="unlisted" <%= status === 'unlisted' ? 'selected' : '' %>>Unlisted</option>
                        </select>
                    </div>
                </div>
            </div>
        </header>

        <div class="card">
            <!-- Rest of the card content remains unchanged -->
            <div class="card-body">
                <div class="row">
                    <!-- Form Section -->
                    <div class="col-md-4">
                        <div class="form-container">
                            <h3 class="form-title">Add Category</h3>
                            <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
                                <div class="mb-4">
                                    <label for="product_name" class="form-label">Name</label>
                                    <input type="text" name="name" placeholder="Type here" class="form-control" id="product_name" novalidate/>
                                    <div id="name-error" class="error-message"></div>
                                </div>
                                <div class="mb-4">
                                    <label class="form-label">Description</label>
                                    <textarea placeholder="Type here" name="description" class="form-control" id="descriptionId" novalidate></textarea>
                                    <div id="description-error" class="error-message"></div>
                                </div>
                                <div class="d-grid">
                                    <button class="btn btn-primary" type="submit">Create category</button>
                                </div>
                            </form>
                        </div>
                    </div>

                    <!-- Table Section -->
                    <div class="col-md-8">
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th scope="col"></th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Description</th>
                                        <th scope="col">Offer Percentage</th>
                                        <th scope="col">Offer</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">List/Unlist</th>
                                        <th scope="col">Edit</th>
                                    </tr>
                                </thead>
                                <tbody id="categoryTableBody">
                                    <% if (cat && cat.length > 0) { %>
                                    <% cat.forEach((category) => { %>
                                    <tr>
                                        <td></td>
                                        <td class="text-start"><%= category.name %></td>
                                        <td class="text-start"><%= category.description %></td>
                                        <td class="text-start">
                                            <%= category.categoryOffer ? category.categoryOffer + '%' : '0%' %>
                                        </td>
                                        <td class="text-start">
                                            <% if(category.categoryOffer === 0) { %>
                                            <button class="btn btn-info" style="width: 100px">
                                                <a href="#" class="text-white" onclick="addOffer('<%= category._id %>')">Add Offer</a>
                                            </button>
                                            <% } else { %>
                                            <button class="btn btn-info" style="width: 100px">
                                                <a href="#" class="text-white" onclick="removeOffer('<%= category._id %>')">Remove</a>
                                            </button>
                                            <% } %>
                                        </td>
                                        <td class="text-start">
                                            <span class="badge rounded-pill alert-<%= category.isListed ? 'success' : 'danger' %>" id="status-<%= category._id %>">
                                                <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                            </span>
                                        </td>
                                        <td class="text-start">
                                            <button id="toggle-btn-<%= category._id %>" 
                                                    onclick="toggleCategoryStatus('<%= category._id %>', '<%= category.isListed %>')" 
                                                    class="btn-action <%= category.isListed ? 'btn-danger' : 'btn-success' %>">
                                                <%= category.isListed ? 'Unlist' : 'List' %>
                                            </button>
                                        </td>
                                        <td class="text-start">
                                            <a href="/admin/editCategory?id=<%= category._id %>" class="btn btn-info">Edit</a>
                                        </td>
                                    </tr>
                                    <% }) %>
                                    <% } else { %>
                                    <tr>
                                        <td colspan="8" class="text-center">No categories found.</td>
                                    </tr>
                                    <% } %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pagination remains the same -->
        <div class="container mt-3">
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                        <a class="page-link pagination-arrow" href="?page=<%= currentPage - 1 %>&search=<%= typeof search !== 'undefined' ? search : '' %>&status=<%= status %>" aria-label="Previous">
                            <span aria-hidden="true">«</span>
                        </a>
                    </li>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                            <a class="page-link pagination-number" href="?page=<%= i %>&search=<%= typeof search !== 'undefined' ? search : '' %>&status=<%= status %>"><%= i %></a>
                        </li>
                    <% } %>
                    <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                        <a class="page-link pagination-arrow" href="?page=<%= currentPage + 1 %>&search=<%= typeof search !== 'undefined' ? search : '' %>&status=<%= status %>" aria-label="Next">
                            <span aria-hidden="true">»</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>

        <!-- Add Offer Modal -->
<div class="modal fade" id="addOfferModal" tabindex="-1" aria-labelledby="addOfferModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addOfferModalLabel">Add Category Offer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addOfferForm">
                    <input type="hidden" id="offerCategoryId" name="categoryId">
                    <div class="mb-3">
                        <label for="offerPercentage" class="form-label">Offer Percentage:</label>
                        <input type="number" class="form-control" id="offerPercentage" name="percentage" min="0" max="100" novalidate>
                        <div id="offerPercentageError" class="text-danger"></div>
                    </div>
                    <div class="mb-3">
                        <label for="offerEndDate" class="form-label">End Date:</label>
                        <input type="date" class="form-control" id="offerEndDate" name="endDate" novalidate>
                        <div id="offerEndDateError" class="text-danger"></div>
                    </div>
                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary" id="saveOfferBtn">Save Offer</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let debounceTimeout;

        function clearSearch() {
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            searchInput.value = '';
            statusFilter.value = 'all';
            searchCategories('', 'all');
        }

        function searchCategories(searchTerm, status) {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(() => {
                $.ajax({
                    url: `/admin/category/?search=${encodeURIComponent(searchTerm)}&page=<%= currentPage %>&status=${status}`,
                    method: 'GET',
                    success: function(response) {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(response, 'text/html');
                        const newTableBody = doc.querySelector('#categoryTableBody');
                        const newPagination = doc.querySelector('.pagination');
                        if (newTableBody) {
                            document.getElementById('categoryTableBody').innerHTML = newTableBody.innerHTML;
                        }
                        if (newPagination) {
                            document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
                        }
                    },
                    error: function(err) {
                        console.error('Search error:', err);
                    }
                });
            }, 300);
        }

        $('#searchInput').on('input', function() {
            const searchTerm = $(this).val().trim();
            const status = $('#statusFilter').val();
            searchCategories(searchTerm, status);
        });

        $('#statusFilter').on('change', function() {
            const status = $(this).val();
            const searchTerm = $('#searchInput').val().trim();
            searchCategories(searchTerm, status);
        });

        async function handleFormSubmit(event) {
            event.preventDefault();
            if (!validateForm()) {
                return false;
            }

            const name = document.querySelector('input[name="name"]').value.trim();
            const description = document.getElementById("descriptionId").value.trim();

            try {
                const response = await fetch('/admin/addCategory', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name, description })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Something went wrong');
                }

                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: data.message,
                    confirmButtonColor: "#FF416C"
                });

                window.location.reload();
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    confirmButtonColor: "#DB4437"
                });
            }
        }

        function validateForm() {
            clearErrorMessages();

            const name = document.getElementsByName("name")[0].value.trim();
            const description = document.getElementById("descriptionId").value.trim();
            let isValid = true;

            if (name === "") {
                displayErrorMessage("name-error", "Please enter a category name.");
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                displayErrorMessage("name-error", "Category name should contain only alphabetic characters.");
                isValid = false;
            }

            if (description === "") {
                displayErrorMessage("description-error", "Please enter a description.");
                isValid = false;
            }

            return isValid;
        }

        function displayErrorMessage(elementId, message) {
            const errorElement = document.getElementById(elementId);
            errorElement.innerText = message;
            errorElement.style.display = "block";
        }

        function clearErrorMessages() {
            const errorElements = document.getElementsByClassName("error-message");
            Array.from(errorElements).forEach((element) => {
                element.innerText = "";
                element.style.display = "none";
            });
        }

        function toggleCategoryStatus(categoryId, isListed) {
            isListed = isListed === 'true' || isListed === true;
            const action = isListed ? 'unlist' : 'list';

            Swal.fire({
                title: `Are you sure you want to ${action} this category?`,
                text: "You can change it later if needed.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#FF416C",
                cancelButtonColor: "#DB4437",
                confirmButtonText: `Yes, ${action} it!`
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/admin/${action}Category?id=${categoryId}`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            const statusBadge = document.getElementById(`status-${categoryId}`);
                            const toggleButton = document.getElementById(`toggle-btn-${categoryId}`);

                            if (action === 'list') {
                                statusBadge.className = 'badge rounded-pill alert-success';
                                statusBadge.textContent = 'Listed';
                                toggleButton.className = 'btn-action btn-danger';
                                toggleButton.textContent = 'Unlist';
                                toggleButton.setAttribute('onclick', `toggleCategoryStatus('${categoryId}', 'true')`);
                            } else {
                                statusBadge.className = 'badge rounded-pill alert-danger';
                                statusBadge.textContent = 'Unlisted';
                                toggleButton.className = 'btn-action btn-success';
                                toggleButton.textContent = 'List';
                                toggleButton.setAttribute('onclick', `toggleCategoryStatus('${categoryId}', 'false')`);
                            }

                            Swal.fire({
                                title: 'Success!',
                                text: data.message,
                                icon: 'success',
                                confirmButtonColor: "#FF416C"
                            });
                        } else {
                            throw new Error(data.message || "Something went wrong");
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        Swal.fire({
                            title: "Error!",
                            text: error.message || "Something went wrong",
                            icon: "error",
                            confirmButtonColor: "#DB4437"
                        });
                    });
                }
            });
        }

        function addOffer(categoryId) {
            $('#addOfferModal').modal('show');
            $('#offerCategoryId').val(categoryId);
            $('#offerPercentageError').text('');
            $('#offerEndDateError').text('');
        }

        async function removeOffer(categoryId) {
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to remove this offer?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#FF416C',
                cancelButtonColor: '#DB4437',
                confirmButtonText: 'Yes, remove it!'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/removeCategoryOffer/${categoryId}`, {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        Swal.fire('Success!', data.message, 'success');
                        window.location.reload();
                    } else {
                        Swal.fire('Error!', data.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error!', 'Something went wrong', 'error');
                }
            }
        }

        $('#addOfferForm').on('submit', async function(e) {
            e.preventDefault();
            const categoryId = $('#offerCategoryId').val();
            const percentage = $('#offerPercentage').val();
            const endDate = $('#offerEndDate').val();

            let isValid = true;
            $('#offerPercentageError').text('');
            $('#offerEndDateError').text('');

            if (!percentage) {
                $('#offerPercentageError').text('Offer percentage is required');
                isValid = false;
            } else if (percentage < 0 || percentage > 100) {
                $('#offerPercentageError').text('Percentage must be between 0 and 100');
                isValid = false;
            }

            if (!endDate) {
                $('#offerEndDateError').text('End date is required');
                isValid = false;
            } else {
                const today = new Date().toISOString().split('T')[0];
                if (endDate < today) {
                    $('#offerEndDateError').text('End date cannot be in the past');
                    isValid = false;
                }
            }

            if (isValid) {
                try {
                    const response = await fetch('/admin/addCategoryOffer', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ categoryId, percentage: parseInt(percentage), endDate })
                    });
                    const data = await response.json();

                    if (data.success) {
                        Swal.fire('Success!', data.message, 'success');
                        $('#addOfferModal').modal('hide');
                        window.location.reload();
                    } else {
                        Swal.fire('Error!', data.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error!', 'Something went wrong', 'error');
                }
            }
        });
    </script>
    <%- include("../../views/partials/admin/footer") %>
</body>