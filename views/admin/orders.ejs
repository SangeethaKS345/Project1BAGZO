<head>
  <!-- SweetAlert2 CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/orders.css">
  <%- include("../../views/partials/admin/header") %>
</head>

<div class="container-fluid px-4">
  <div class="content-header row">
    <div class="d-flex justify-content-between align-items-center">
      <h2 class="content-title">Order Management</h2>
    </div>
  </div>

  <header class="card-header mb-20">
    <div class="search-container">
      <form action="/admin/orders/" method="get" class="d-inline" id="searchForm">
        <div class="input-group">
          <input
            type="text"
            class="form-control border-0"
            placeholder="Search by Product Name or Order ID"
            name="search"
            id="searchInput"
            value="<%= search || '' %>"
            autocomplete="off"
          >
          <select class="form-select border-0" name="status" id="statusFilter">
            <option value="" <%= status === '' ? 'selected' : '' %>>All Statuses</option>
            <option value="Pending" <%= status === 'Pending' ? 'selected' : '' %>>Pending</option>
            <option value="Processing" <%= status === 'Processing' ? 'selected' : '' %>>Processing</option>
            <option value="Shipped" <%= status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
            <option value="Out for Delivery" <%= status === 'Out for Delivery' ? 'selected' : '' %>>Out for Delivery</option>
            <option value="Delivered" <%= status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
            <option value="Cancelled" <%= status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
            <option value="Returned" <%= status === 'Returned' ? 'selected' : '' %>>Returned</option>
          </select>
          <select class="form-select border-0" name="sort" id="sortFilter">
            <option value="new-to-old" <%= sort === 'new-to-old' ? 'selected' : '' %>>New to Old</option>
            <option value="old-to-new" <%= sort === 'old-to-new' ? 'selected' : '' %>>Old to New</option>
            <option value="a-to-z" <%= sort === 'a-to-z' ? 'selected' : '' %>>A to Z (Customer)</option>
            <option value="z-to-a" <%= sort === 'z-to-a' ? 'selected' : '' %>>Z to A (Customer)</option>
          </select>
          <button class="btn btn-secondary border-0" type="button" id="clearFilters">Clear</button>
        </div>
      </form>
      <div class="search-suggestions" id="searchSuggestions"></div>
    </div>

    <div class="d-flex justify-content-end mt-3">
      <button class="btn btn-primary rounded-pill" id="returnRequestsBtn" style="background-color: #ff4b2b;">Return Requests</button>
    </div>
  </header>

  <div class="right">
    <table class="table table-striped">
      <thead>
        <tr>
          <th scope="col">Order ID</th>
          <th scope="col">Date</th>
          <th scope="col">Customer</th>
          <th scope="col">Products</th>
          <th scope="col">Total</th>
          <th scope="col">Payment</th>
          <th scope="col">Status</th>
          <th scope="col">Action</th>
        </tr>
      </thead>
      <tbody id="orderTableBody">
        <% orders.forEach(order => { %>
        <tr>
          <td><%= order._id %></td>
          <td><%= new Date(order.date).toLocaleDateString() %></td>
          <td><%= order.customer %></td>
          <td>
            <% order.products.forEach(product => { %>
            <div class="product-item mb-2">
              <img src="/iploads/re-image/<%= product.productImage && product.productImage[0] ? product.productImage[0] : 'default.jpg' %>" alt="<%= product.productName || 'N/A' %>" class="product-image product-clickable" data-product-id="<%= product._id %>">
              <div class="product-info">
                <span><%= product.name %></span><br>
                <small>Color: <%= product.color %> | Qty: <%= product.quantity %></small>
              </div>
            </div>
            <% }) %>
          </td>
          <td>₹<%= order.total %></td>
          <td>
            <span class="badge payment-<%= order.payment.toLowerCase().replace(/\s+/g, '-') %>">
              <%= order.payment %>
            </span>
          </td>
          <td>
            <select 
              class="form-select status-select" 
              data-order-id="<%= order._id %>" 
              <%= ['Cancelled', 'Returned', 'Delivered'].includes(order.status) ? 'disabled' : '' %>
            >
              <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
              <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
              <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
              <option value="Out for Delivery" <%= order.status === 'Out for Delivery' ? 'selected' : '' %>>Out for Delivery</option>
              <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
              <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
              <option value="Returned" <%= order.status === 'Returned' ? 'selected' : '' %>>Returned</option>
            </select>
          </td>
          <td class="text-start">
            <button class="btn-action btn-warning" onclick="viewDetails('<%= order._id %>')">View Details</button>
          </td>
        </tr>
        <% }) %>
      </tbody>
    </table>
  </div>

  <div class="container mt-3">
    <nav aria-label="Page navigation">
      <ul class="pagination justify-content-center">
        <!-- Previous Button -->
        <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
          <a class="page-link pagination-arrow" href="?page=<%= currentPage - 1 %>&<%= queryParams %>" aria-label="Previous">
            <span aria-hidden="true">«</span>
          </a>
        </li>

        <!-- Page Numbers with Ellipsis -->
        <% 
          const maxPagesToShow = 5;
          let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
          let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

          if (endPage === totalPages) {
            startPage = Math.max(1, totalPages - maxPagesToShow + 1);
          }

          if (startPage > 1) { %>
            <li class="page-item">
              <a class="page-link pagination-number" href="?page=1&<%= queryParams %>">1</a>
            </li>
            <% if (startPage > 2) { %>
              <li class="page-item disabled">
                <span class="page-link">...</span>
              </li>
            <% } %>
        <% } %>

        <!-- Page Numbers -->
        <% for (let i = startPage; i <= endPage; i++) { %>
          <li class="page-item <%= i === currentPage ? 'active' : '' %>">
            <a class="page-link pagination-number" href="?page=<%= i %>&<%= queryParams %>"><%= i %></a>
          </li>
        <% } %>

        <!-- Show last page and ellipsis if needed -->
        <% if (endPage < totalPages) { %>
          <% if (endPage < totalPages - 1) { %>
            <li class="page-item disabled">
              <span class="page-link">...</span>
            </li>
          <% } %>
          <li class="page-item">
            <a class="page-link pagination-number" href="?page=<%= totalPages %>&<%= queryParams %>"><%= totalPages %></a>
          </li>
        <% } %>

        <!-- Next Button -->
        <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
          <a class="page-link pagination-arrow" href="?page=<%= currentPage + 1 %>&<%= queryParams %>" aria-label="Next">
            <span aria-hidden="true">»</span>
          </a>
        </li>
      </ul>
    </nav>
  </div>
</div>

<!-- Modal for order details -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content" style="background-color: #2b2b2b; color: #fff;">
      <div class="modal-header">
        <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <!-- Order Information -->
          <div class="col-md-6">
            <h6 class="text-warning mb-3">Order Information</h6>
            <p><strong>Order ID:</strong> <span id="modalOrderId"></span></p>
            <p><strong>Order Date:</strong> <span id="modalOrderDate"></span></p>
            <p><strong>Payment Method:</strong> <span id="modalPaymentMethod"></span></p>
            <p><strong>Total Amount:</strong> ₹<span id="modalTotalAmount"></span></p>
          </div>

          <!-- Customer Information -->
          <div class="col-md-6">
            <h6 class="text-warning mb-3">Customer Information</h6>
            <p><strong>Name:</strong> <span id="modalCustomerName"></span></p>
            <p><strong>Email:</strong> <span id="modalCustomerEmail"></span></p>
            <p><strong>Phone:</strong> <span id="modalCustomerPhone"></span></p>
          </div>
        </div>

        <!-- Shipping Address -->
        <div class="shipping-address mt-4">
          <h6 class="text-warning mb-3">Shipping Address</h6>
          <div class="address-box p-3">
            <p><strong>Name:</strong> <span id="modalShippingName"></span></p>
            <p><strong>Landmark:</strong> <span id="modalLandmark"></span></p>
            <p><strong>City:</strong> <span id="modalCity"></span></p>
            <p><strong>State:</strong> <span id="modalState"></span></p>
            <p><strong>Pincode:</strong> <span id="modalPincode"></span></p>
            <p><strong>Phone:</strong> <span id="modalMobile"></span></p>
            <p><strong>Alternative Phone:</strong> <span id="modalAltPhone"></span></p>
          </div>
        </div>

        <!-- Order Items -->
        <div class="order-items mt-4">
          <h6 class="text-warning mb-3">Order Items</h6>
          <div class="table-responsive">
            <table class="table table-dark">
              <thead>
                <tr>
                  <th>Product</th>
                  <th>Price</th>
                  <th>Quantity</th>
                  <th>Status</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody id="modalOrderItems">
                <!-- Order items will be inserted here dynamically -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Return Requests Modal -->
<div class="modal fade" id="returnRequestsModal" tabindex="-1" aria-labelledby="returnRequestsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content" style="background-color: #2b2b2b; color: #fff;">
      <div class="modal-header">
        <h5 class="modal-title" id="returnRequestsModalLabel">Return Requests</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="table-responsive">
          <table class="table table-dark">
            <thead>
              <tr>
                <th>Order ID</th>
                <th>Product Name</th>
                <th>Customer Name</th>
                <th>Quantity</th>
                <th>Amount</th>
                <th>Return Reason</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="returnRequestsTable">
              <!-- Return requests will be populated here via JavaScript -->
            </tbody>
          </table>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
  let debounceTimeout;

  // Function to clear search filters
  function clearSearch() {
    const searchInput = document.getElementById('searchInput');
    const statusFilter = document.getElementById('statusFilter');
    const sortFilter = document.getElementById('sortFilter');
    searchInput.value = '';
    statusFilter.value = '';
    sortFilter.value = 'new-to-old';
    document.getElementById('searchSuggestions').classList.remove('active');
    searchOrders('', '', 'new-to-old');
  }

  // Function to perform AJAX search
  function searchOrders(searchTerm, status, sort) {
    clearTimeout(debounceTimeout);
    debounceTimeout = setTimeout(() => {
      $.ajax({
        url: `/admin/orders/?search=${encodeURIComponent(searchTerm)}&status=${encodeURIComponent(status)}&sort=${encodeURIComponent(sort)}&page=<%= currentPage %>`,
        method: 'GET',
        success: function(response) {
          const parser = new DOMParser();
          const doc = parser.parseFromString(response, 'text/html');
          const newTableBody = doc.querySelector('#orderTableBody');
          const newPagination = doc.querySelector('.pagination');
          if (newTableBody) {
            document.getElementById('orderTableBody').innerHTML = newTableBody.innerHTML;
          }
          if (newPagination) {
            document.querySelector('.pagination').innerHTML = newPagination.innerHTML;
          }
          // Re-attach event listeners for status selects
          attachStatusListeners();
        },
        error: function(err) {
          console.error('Search error:', err);
          Swal.fire({
            title: 'Error!',
            text: 'Failed to load search results',
            icon: 'error',
            confirmButtonText: 'OK',
          });
        }
      });
    }, 300);
  }

  // Autocomplete suggestions
  async function fetchSuggestions(query) {
    try {
      const response = await fetch(`/admin/orders/suggestions?search=${encodeURIComponent(query)}`);
      const suggestions = await response.json();
      const suggestionBox = document.getElementById('searchSuggestions');
      suggestionBox.innerHTML = '';
      if (suggestions.length > 0) {
        suggestions.forEach(s => {
          const div = document.createElement('div');
          div.textContent = s;
          div.addEventListener('click', () => {
            document.getElementById('searchInput').value = s;
            const status = document.getElementById('statusFilter').value;
            const sort = document.getElementById('sortFilter').value;
            searchOrders(s, status, sort);
          });
          suggestionBox.appendChild(div);
        });
        suggestionBox.classList.add('active');
      } else {
        suggestionBox.classList.remove('active');
      }
    } catch (error) {
      console.error('Error fetching suggestions:', error);
    }
  }

  // Search input handling
  $('#searchInput').on('input', function() {
    const query = $(this).val().trim();
    const status = $('#statusFilter').val();
    const sort = $('#sortFilter').val();
    if (query.length >= 2) {
      fetchSuggestions(query);
    } else {
      document.getElementById('searchSuggestions').classList.remove('active');
    }
    searchOrders(query, status, sort);
  });

  // Hide suggestions on blur
  document.getElementById('searchInput').addEventListener('blur', function() {
    setTimeout(() => {
      document.getElementById('searchSuggestions').classList.remove('active');
    }, 200);
  });

  // Status filter change
  $('#statusFilter').on('change', function() {
    const status = $(this).val();
    const searchTerm = $('#searchInput').val().trim();
    const sort = $('#sortFilter').val();
    document.getElementById('searchSuggestions').classList.remove('active');
    searchOrders(searchTerm, status, sort);
  });

  // Sort filter change
  $('#sortFilter').on('change', function() {
    const sort = $(this).val();
    const searchTerm = $('#searchInput').val().trim();
    const status = $('#statusFilter').val();
    document.getElementById('searchSuggestions').classList.remove('active');
    searchOrders(searchTerm, status, sort);
  });

  // Clear filters
  $('#clearFilters').on('click', function() {
    clearSearch();
  });

  // Function to attach status update listeners
  function attachStatusListeners() {
    document.querySelectorAll('.status-select').forEach(select => {
      select.addEventListener('change', async function() {
        const orderId = this.dataset.orderId;
        const newStatus = this.value;

        try {
          const response = await fetch(`/admin/orders/update-status/${orderId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              status: newStatus,
            }),
          });

          if (response.ok) {
            Swal.fire({
              title: 'Success!',
              text: 'Order status updated successfully',
              icon: 'success',
              confirmButtonText: 'OK',
            });
            // Disable dropdown if new status is Cancelled, Returned, or Delivered
            if (['Cancelled', 'Returned', 'Delivered'].includes(newStatus)) {
              this.disabled = true;
            }
          } else {
            const errorData = await response.json();
            Swal.fire({
              title: 'Error!',
              text: errorData.error || 'Failed to update order status',
              icon: 'error',
              confirmButtonText: 'OK',
            });
            this.value = this.querySelector('option[selected]').value;
          }
        } catch (error) {
          Swal.fire({
            title: 'Error!',
            text: 'Failed to update order status',
            icon: 'error',
            confirmButtonText: 'OK',
          });
          this.value = this.querySelector('option[selected]').value;
        }
      });
    });
  }

  // Initial attachment of status listeners
  attachStatusListeners();

  // View details function
  async function viewDetails(orderId) {
    try {
      const response = await fetch(`/admin/orders/details/${orderId}`);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to fetch order details');
      }

      document.getElementById('modalOrderId').textContent = data._id;
      document.getElementById('modalOrderDate').textContent = new Date(data.date).toLocaleDateString();
      document.getElementById('modalPaymentMethod').textContent = data.payment;
      document.getElementById('modalTotalAmount').textContent = data.total;

      document.getElementById('modalCustomerName').textContent = data.customer.name;
      document.getElementById('modalCustomerEmail').textContent = data.customer.email;
      document.getElementById('modalCustomerPhone').textContent = data.customer.phone;

      document.getElementById('modalShippingName').textContent = data.shippingAddress.fullName;
      document.getElementById('modalLandmark').textContent = data.shippingAddress.landMark;
      document.getElementById('modalCity').textContent = data.shippingAddress.city;
      document.getElementById('modalState').textContent = data.shippingAddress.state;
      document.getElementById('modalPincode').textContent = data.shippingAddress.pincode;
      document.getElementById('modalMobile').textContent = data.shippingAddress.phone;
      document.getElementById('modalAltPhone').textContent = data.shippingAddress.altPhone;

      const orderItemsHtml = data.products.map(product => `
        <tr>
          <td>
            <div class="d-flex align-items-center">
              <img src="${product.image}" alt="${product.name}" width="40" class="me-2">
              <div>
                <div>${product.name}</div>
                <small>Color: ${product.color}</small>
              </div>
            </div>
          </td>
          <td>₹${product.price}</td>
          <td>${product.quantity}</td>
          <td><span class="badge alert-warning">${product.status}</span></td>
          <td>₹${product.price * product.quantity}</td>
        </tr>
      `).join('');
      document.getElementById('modalOrderItems').innerHTML = orderItemsHtml;

      const modal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
      modal.show();
    } catch (error) {
      console.error('Error fetching order details:', error);
      Swal.fire({
        title: 'Error!',
        text: error.message || 'Failed to load order details',
        icon: 'error',
        confirmButtonText: 'OK',
      });
    }
  }

  // Return Requests Modal
  document.getElementById('returnRequestsBtn').addEventListener('click', async function() {
    try {
      const response = await fetch('/admin/orders/return-requests');
      const returnRequests = await response.json();

      const tableBody = document.getElementById('returnRequestsTable');
      tableBody.innerHTML = '';

      if (returnRequests.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center">No return requests found</td></tr>';
      } else {
        returnRequests.forEach(request => {
          if (request.status !== 'Returned') {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${request._id}</td>
              <td>${request.products[0].name}</td>
              <td>${request.customer}</td>
              <td>${request.products[0].quantity}</td>
              <td>₹${request.total}</td>
              <td>${request.returnReason || 'Not specified'}</td>
              <td>
                <button class="btn btn-sm btn-success accept-return-btn" data-order-id="${request._id}">Accept</button>
                <button class="btn btn-sm btn-danger reject-return-btn" data-order-id="${request._id}">Reject</button>
              </td>
            `;
            tableBody.appendChild(row);
          }
        });
      }

      document.querySelectorAll('.accept-return-btn').forEach(button => {
        button.addEventListener('click', async function() {
          const orderId = this.dataset.orderId;
          try {
            const response = await fetch(`/admin/orders/update-return-status/${orderId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                status: 'Returned',
                action: 'accept',
              }),
            });

            const result = await response.json();
            if (response.ok) {
              Swal.fire({
                title: 'Success!',
                text: 'Return request accepted and amount refunded to wallet',
                icon: 'success',
                confirmButtonText: 'OK',
              });
              this.closest('tr').remove();
            } else {
              Swal.fire({
                title: 'Error!',
                text: result.error || 'Failed to process return',
                icon: 'error',
                confirmButtonText: 'OK',
              });
            }
          } catch (error) {
            Swal.fire({
              title: 'Error!',
              text: 'Failed to process return request',
              icon: 'error',
              confirmButtonText: 'OK',
            });
          }
        });
      });

      document.querySelectorAll('.reject-return-btn').forEach(button => {
        button.addEventListener('click', async function() {
          const orderId = this.dataset.orderId;
          try {
            const response = await fetch(`/admin/orders/update-return-status/${orderId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                status: 'Delivered',
                action: 'reject',
              }),
            });

            const result = await response.json();
            if (response.ok) {
              Swal.fire({
                title: 'Success!',
                text: 'Return request rejected',
                icon: 'success',
                confirmButtonText: 'OK',
              });
              this.closest('tr').remove();
            } else {
              Swal.fire({
                title: 'Error!',
                text: result.error || 'Failed to reject return',
                icon: 'error',
                confirmButtonText: 'OK',
              });
            }
          } catch (error) {
            Swal.fire({
              title: 'Error!',
              text: 'Failed to reject return request',
              icon: 'error',
              confirmButtonText: 'OK',
            });
          }
        });
      });

      const modal = new bootstrap.Modal(document.getElementById('returnRequestsModal'));
      modal.show();
    } catch (error) {
      console.error('Error fetching return requests:', error);
      Swal.fire({
        title: 'Error!',
        text: 'Failed to load return requests',
        icon: 'error',
        confirmButtonText: 'OK',
      });
    }
  });
</script>

<%- include("../../views/partials/admin/footer") %>