
<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css">
    <link rel="stylesheet" href="/css//editProduct.css" type="text/css">
</head>
<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form method="post" action="/admin/editProduct/<%=product._id %>" enctype="multipart/form-data" id="editProductForm">
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%=product.productName%>"
                                class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>
                        <div class="col-lg-4 mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand">
                                <% for(let i=0; i<brand.length; i++) { %>
                                <option value="<%= brand[i].brandName %>" <% if(brand[i].brandName === product.brand.brandName) { %>selected<% } %>>
                                    <%= brand[i].brandName %>
                                </option>
                                <% } %>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea name="descriptionData" class="form-control border" rows="4"><%=product.description%></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Regular price</label>
                                    <input placeholder="$" name="regularPrice" type="text"
                                        value="<%=product.regularPrice%>" class="form-control border">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Sales price</label>
                                    <input name="salesPrice" type="text" value="<%=product.salesPrice%>"
                                        class="form-control border">
                                    <div id="salesPrice-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input name="quantity" type="text" value="<%=product.quantity%>"
                                        class="form-control border">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-4">
                                <div class="mb-4">
                                    <label class="form-label">Color</label>
                                    <input name="color" type="text" value="<%=product.color%>"
                                        class="form-control border">
                                    <div id="color-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="row gx-2">
                                    <div class="col-sm-6 mb-3">
                                        <label class="form-label">Category</label>
                                        <select class="form-select border" name="category">
                                            <%for(let i=0;i<cat.length;i++){%>
                                            <option value="<%=cat[i]._id%>" <% if(cat[i]._id.toString() === product.category.toString()) { %>selected<% } %>>
                                                <%=cat[i].name%>
                                            </option>
                                            <%}%>
                                        </select>
                                        <div id="category-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                                <!-- Current Images Display -->
                                <div class="mb-4">
                                    <label class="form-label">Current Images</label>
                                    <div class="images-grid" id="current-images-container">
                                        <%for(let i=0;i<product.productImage.length;i++){%>
                                        <div class="image-preview-container" id="image-container-<%=i%>">
                                            <input type="hidden" name="currentImages[]" value="<%=product.productImage[i]%>">
                                            <input type="hidden" name="imagePositions[]" value="<%=i%>">
                                            <img class="image-preview" src="/uploads/re-image/<%=product.productImage[i]%>" alt="Product Image">
                                            <button type="button" class="remove-image-btn" onclick="deleteSingleImage('<%=product.productImage[i]%>','<%=product._id%>', '<%=i%>')">X</button>
                                            <span class="image-position-label">Position <%=i+1%></span>
                                        </div>
                                        <%}%>
                                    </div>
                                </div>
                                
                                <!-- Image Upload Controls -->
                                <div class="mb-4">
                                    <label class="form-label">Upload New Images</label>
                                    <div class="images-grid" id="upload-images-container">
                                        <!-- Image slots will be added here -->
                                    </div>
                                    <button type="button" class="btn btn-sm custom-btn-primary mt-3" id="addImageBtn">Add New Image</button>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                                
                                <!-- Cropper Container (hidden initially) -->
                                <div id="cropperContainer" class="cropper-container" style="display:none; margin-top: 20px;">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <div id="cropperWrapper" style="max-width: 100%; height: 400px;">
                                                <img src="" id="cropperImage" style="max-width: 100%;">
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="d-flex flex-column">
                                                <h5>Preview</h5>
                                                <div id="cropped-preview" style="width: 150px; height: 150px; overflow: hidden; margin-bottom: 10px; border: 1px solid #ddd;"></div>
                                                <button type="button" id="saveCroppedBtn" class="btn btn-sm custom-btn-primary">Save Cropped Image</button>
                                                <button type="button" id="cancelCropBtn" class="btn btn-sm custom-btn-secondary mt-2">Cancel</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="action-buttons">
                            <button class="btn btn-md custom-btn-primary" id="updateBtn"
                                type="button" onclick="validateAndSubmit()">Update Product</button>
                            <button class="btn btn-md custom-btn-secondary" id="resetBtn"
                                type="button" onclick="resetForm()">Reset Form</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
   
    let currentCropper = null;
    let currentImageInput = null;
    let currentImagePosition = null;
    let imageCount = 0; // Start with no image inputs
    let formSubmitted = false;
    let pendingCropperSave = false;
    let originalFormData = null;

    // Document ready function
    document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('success') === 'true') {
            Swal.fire({
                title: 'Success!',
                text: 'Product has been updated successfully',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then(() => {
                window.history.replaceState({}, document.title, window.location.pathname);
            });
        }
        
        // Store original form data for reset functionality
        originalFormData = new FormData(document.getElementById('editProductForm'));
        
        // Add first image slot automatically
        addImageSlot();
    });

    // Function to add a new image slot
    function addImageSlot() {
        const container = document.getElementById('upload-images-container');
        const position = imageCount;
        
        const newImageDiv = document.createElement('div');
        newImageDiv.className = 'image-preview-container';
        newImageDiv.id = `upload-container-${position}`;
        newImageDiv.innerHTML = `
            <img src="" alt="" id="imgView${position}" class="image-preview">
            <input class="form-control" type="file" name="images" id="input${position}" 
                accept="image/png, image/jpeg, image/jpg" 
                onchange="validateAndPreviewImage(event, ${position})"
                data-position="${position}">
            <button type="button" class="btn btn-sm custom-btn-secondary mt-2" onclick="removeImage(${position})">Remove</button>
            <div class="error-message" id="image-error-${position}"></div>
            <input type="hidden" name="addPosition[]" value="${position}">
        `;
        
        container.appendChild(newImageDiv);
        imageCount++;
    }

    // Add image button event listener
    document.getElementById('addImageBtn').addEventListener('click', function() {
        addImageSlot();
    });

    // Validate and preview new image uploads
    function validateAndPreviewImage(event, index) {
        const file = event.target.files[0];
        const errorElement = document.getElementById(`image-error-${index}`);
        errorElement.style.display = 'none';
        
        if (!file) return false;
        
        const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
        if (!allowedTypes.includes(file.type)) {
            errorElement.textContent = 'Invalid file type. Only JPEG, PNG, and JPG are allowed.';
            errorElement.style.display = 'block';
            event.target.value = '';
            document.getElementById(`imgView${index}`).src = '';
            return false;
        }
        
        const maxSize = 2 * 1024 * 1024; // 2MB
        if (file.size > maxSize) {
            errorElement.textContent = 'File size exceeds 2MB.';
            errorElement.style.display = 'block';
            event.target.value = '';
            document.getElementById(`imgView${index}`).src = '';
            return false;
        }
        
        startCropping(event.target, index);
        return true;
    }

    // Start cropping for new uploads
    function startCropping(inputElement, index) {
        currentImageInput = inputElement;
        currentImagePosition = index;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            const cropperImage = document.getElementById('cropperImage');
            cropperImage.src = e.target.result;
            
            document.getElementById('cropperContainer').style.display = 'block';
            document.getElementById('cropperContainer').scrollIntoView({ behavior: 'smooth' });
            
            if (currentCropper) {
                currentCropper.destroy();
            }
            
            currentCropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 0.8,
                zoomable: true,
                preview: '#cropped-preview'
            });
        };
        
        if (inputElement.files[0]) {
            reader.readAsDataURL(inputElement.files[0]);
        }
    }

    // Edit existing image
    function editExistingImage(imageIndex) {
        const imageUrl = document.querySelector(`#image-container-${imageIndex} img`).src;
        
        const cropperImage = document.getElementById('cropperImage');
        cropperImage.src = imageUrl;
        
        document.getElementById('cropperContainer').style.display = 'block';
        document.getElementById('cropperContainer').scrollIntoView({ behavior: 'smooth' });
        
        if (currentCropper) {
            currentCropper.destroy();
        }
        
        currentCropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 0.8,
            zoomable: true,
            preview: '#cropped-preview'
        });
        
        currentImagePosition = imageIndex;
        
        // Set custom handler for existing image edit
        document.getElementById('saveCroppedBtn').onclick = function() {
            if (!currentCropper) return;
            
            const canvas = currentCropper.getCroppedCanvas({
                width: 600,
                height: 600
            });
            
            canvas.toBlob(function(blob) {
                const fileName = `edited_${imageIndex}.jpg`;
                const newFile = new File([blob], fileName, {
                    type: 'image/jpeg',
                    lastModified: new Date().getTime()
                });
                
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(newFile);
                
                // Create new file input for the edited image if it doesn't exist
                let editInput = document.getElementById(`edit_input_${imageIndex}`);
                if (!editInput) {
                    editInput = document.createElement('input');
                    editInput.type = 'file';
                    editInput.name = 'editedImages';
                    editInput.id = `edit_input_${imageIndex}`;
                    editInput.style.display = 'none';
                    document.getElementById(`image-container-${imageIndex}`).appendChild(editInput);
                    
                    // Add hidden input for position
                    const positionInput = document.createElement('input');
                    positionInput.type = 'hidden';
                    positionInput.name = 'editPositions[]';
                    positionInput.value = imageIndex;
                    document.getElementById(`image-container-${imageIndex}`).appendChild(positionInput);
                }
                
                editInput.files = dataTransfer.files;
                
                // Update preview
                document.querySelector(`#image-container-${imageIndex} img`).src = canvas.toDataURL('image/jpeg');
                
                document.getElementById('cropperContainer').style.display = 'none';
                currentCropper.destroy();
                currentCropper = null;
                
                // Reset save button to default handler
                document.getElementById('saveCroppedBtn').onclick = saveCroppedImage;
            }, 'image/jpeg', 0.9);
        };
    }

    // Save cropped image (for new uploads)
    function saveCroppedImage() {
        if (!currentCropper || !currentImageInput) return;
        
        const canvas = currentCropper.getCroppedCanvas({
            width: 600,
            height: 600
        });
        
        pendingCropperSave = false;
        
        canvas.toBlob(function(blob) {
            const fileName = currentImageInput.files[0].name;
            const newFile = new File([blob], fileName, {
                type: 'image/jpeg',
                lastModified: new Date().getTime()
            });
            
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(newFile);
            
            currentImageInput.files = dataTransfer.files;
            const index = currentImageInput.getAttribute('data-position');
            document.getElementById(`imgView${index}`).src = canvas.toDataURL('image/jpeg');
            
            document.getElementById('cropperContainer').style.display = 'none';
            currentCropper.destroy();
            currentCropper = null;
            currentImageInput = null;
            
            if (formSubmitted) submitForm();
        }, 'image/jpeg', 0.9);
    }

    // Set default save cropped image event handler
    document.getElementById('saveCroppedBtn').addEventListener('click', saveCroppedImage);

    // Cancel cropping
    document.getElementById('cancelCropBtn').addEventListener('click', function() {
        if (currentCropper) {
            currentCropper.destroy();
            currentCropper = null;
        }
        
        if (currentImageInput) {
            currentImageInput.value = '';
            const index = currentImageInput.getAttribute('data-position');
            document.getElementById(`imgView${index}`).src = '';
            currentImageInput = null;
        }
        
        // Reset the save button to default handler
        document.getElementById('saveCroppedBtn').onclick = saveCroppedImage;
        
        document.getElementById('cropperContainer').style.display = 'none';
        pendingCropperSave = false;
        
        if (formSubmitted) submitForm();
    });

    // Remove image
    function removeImage(index) {
        document.getElementById(`input${index}`).value = '';
        document.getElementById(`imgView${index}`).src = '';
        document.getElementById(`image-error-${index}`).style.display = 'none';
    }

    // Delete existing image via AJAX
    function deleteSingleImage(imageId, productId, position) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#DB4437',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: "/admin/deleteImage",
                    method: 'post',
                    data: { 
                        imageNameToServer: imageId, 
                        productIdToServer: productId,
                        positionToServer: position 
                    },
                    success: ((response) => {
                        if (response.status === true) {
                            document.getElementById(`image-container-${position}`).remove();
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'Image has been deleted successfully',
                                icon: 'success',
                                timer: 1500,
                                showConfirmButton: false
                            });
                            reindexImages();
                        } else {
                            Swal.fire({
                                title: 'Error!',
                                text: 'Failed to delete image',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    }),
                    error: (() => {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to delete image',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    })
                });
            }
        });
    }

    // Reindex image positions after deletion
    function reindexImages() {
        const containers = document.querySelectorAll('#current-images-container .image-preview-container');
        containers.forEach((container, index) => {
            const label = container.querySelector('.image-position-label');
            if (label) label.textContent = `Position ${index + 1}`;
            
            const positionInput = container.querySelector('input[name="imagePositions[]"]');
            if (positionInput) positionInput.value = index;
            
            container.id = `image-container-${index}`;
            
            const deleteBtn = container.querySelector('.remove-image-btn');
            if (deleteBtn) {
                const imageName = container.querySelector('input[name="currentImages[]"]').value;
                const productId = '<%= product._id %>';
                deleteBtn.setAttribute('onclick', `deleteSingleImage('${imageName}', '${productId}', '${index}')`);
            }
        });
    }

    // Reset form to original state
    function resetForm() {
        Swal.fire({
            title: 'Are you sure?',
            text: "All changes will be lost!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#DB4437',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, reset it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Reset form fields to original values
                const form = document.getElementById('editProductForm');
                form.reset();
                
                // Reset product images
                document.querySelectorAll('#upload-images-container .image-preview-container').forEach(container => {
                    container.remove();
                });
                
                // Clear any error messages
                clearErrorMessages();
                
                // Add first image slot
                imageCount = 0;
                addImageSlot();
                
                Swal.fire({
                    title: 'Reset!',
                    text: 'Form has been reset to original values',
                    icon: 'info',
                    timer: 1500,
                    showConfirmButton: false
                });
                
                // Reset any dynamic fields to their original state
                document.getElementById('upload-images-container').innerHTML = '';
                imageCount = 0;
                addImageSlot();
            }
        });
    }

    // Form validation and submission
    function validateAndSubmit() {
        clearErrorMessages();
        
        if (validateForm()) {
            formSubmitted = true;
            
            if (currentCropper && currentImageInput) {
                pendingCropperSave = true;
                document.getElementById('saveCroppedBtn').click();
            } else {
                submitForm();
            }
        }
    }

    function submitForm() {
    if (pendingCropperSave) return;
    
    const form = document.getElementById('editProductForm');
    const formData = new FormData(form);
    
    document.getElementById('updateBtn').disabled = true;
    
    Swal.fire({
        title: 'Updating...',
        text: 'Please wait while we update the product',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });
    
    fetch(form.action, {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (response.redirected) {
            Swal.fire({
                title: 'Success!',
                text: 'Product has been updated successfully',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/admin/products';
                }
            });
        } else {
            return response.json().then(data => {
                throw new Error(data.message || 'Failed to update product');
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: error.message || 'Failed to update product',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    })
    .finally(() => {
        document.getElementById('updateBtn').disabled = false;
        formSubmitted = false;
    });
}

function validateForm() {
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementsByName('descriptionData')[0].value;
    const regularPrice = document.getElementsByName('regularPrice')[0].value;
    const salesPrice = document.getElementsByName('salesPrice')[0].value;
    const color = document.getElementsByName('color')[0].value;
    const quantity = document.getElementsByName('quantity')[0].value;
    let isValid = true;

    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    }

    if (description.trim() === '') {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    if (quantity.trim() === '') {
        displayErrorMessage('quantity-error', 'Please enter a quantity.');
        isValid = false;
    } else if (isNaN(quantity) || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
        isValid = false;
    }

    if (regularPrice.trim() === '') {
        displayErrorMessage('regularPrice-error', 'Please enter a regular price.');
        isValid = false;
    } else if (!/^\d+(\.\d{1,2})?$/.test(regularPrice) || parseFloat(regularPrice) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price (format: 0.00).');
        isValid = false;
    }

    if (salesPrice.trim() !== '' && (!/^\d+(\.\d{1,2})?$/.test(salesPrice) || parseFloat(salesPrice) < 0)) {
        displayErrorMessage('salesPrice-error', 'Please enter a valid non-negative price (format: 0.00).');
        isValid = false;
    }

    if (salesPrice.trim() !== '' && regularPrice.trim() !== '') {
        if (parseFloat(salesPrice) > parseFloat(regularPrice)) {
            displayErrorMessage('salesPrice-error', 'Sales price cannot be higher than regular price.');
            isValid = false;
        }
    }

    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

    // Validate any file inputs
    for (let i = 0; i < imageCount; i++) {
        const input = document.getElementById(`input${i}`);
        if (input && input.files.length > 0) {
            const file = input.files[0];
            const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
            const maxSize = 2 * 1024 * 1024;
            
            if (!allowedTypes.includes(file.type)) {
                displayErrorMessage(`image-error-${i}`, 'Invalid file type. Only JPEG, PNG, and JPG are allowed.');
                isValid = false;
            }
            
            if (file.size > maxSize) {
                displayErrorMessage(`image-error-${i}`, 'File size exceeds 2MB.');
                isValid = false;
            }
        }
    }

    if (!isValid) {
        const firstError = document.querySelector('.error-message[style="display: block;"]');
        if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = "block";
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.style.display = "none";
    });
}
</script>